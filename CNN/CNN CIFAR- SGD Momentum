{"cells":[{"cell_type":"markdown","metadata":{"id":"yUaU31blS68J"},"source":["#1. Set up Google Drive"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":24492,"status":"ok","timestamp":1678566088446,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"suVnBfenS26c","outputId":"3cecd949-5e7d-4de6-eef1-a977a8f26e37"},"outputs":[{"name":"stdout","output_type":"stream","text":["Mounted at /content/gdrive\n","/content/gdrive/.shortcut-targets-by-id/1Fl8lRtFtcplDqGhTruxlsGlVDZByXON0/NN_DL/CNN\n","/content/gdrive/.shortcut-targets-by-id/1Fl8lRtFtcplDqGhTruxlsGlVDZByXON0/NN_DL/CNN\n","data  file.txt\tGFG  resnet_adam.pt  resnet_sgdnest.pt\n"]}],"source":["import os\n","try:\n","    \n","    from google.colab import drive\n","    drive.mount('/content/gdrive')\n","\n","    DRIVE_PATH = '/content/gdrive/My\\ Drive/NN_DL/CNN' # Sim's path\n","    #DRIVE_PATH = '/content/gdrive/My\\ Drive/UCLA/NN_DL/GANS' # Ran's paths\n","    DRIVE_PYTHON_PATH = DRIVE_PATH.replace('\\\\', '')\n","    if not os.path.exists(DRIVE_PYTHON_PATH):\n","      %mkdir $DRIVE_PATH\n","\n","    ## the space in `My Drive` causes some issues,\n","    ## make a symlink to avoid this\n","    SYM_PATH = '/content/CNN'\n","    if not os.path.exists(SYM_PATH):\n","      !ln -s $DRIVE_PATH $SYM_PATH\n","    \n","    running_in_colab = True\n","    \n","    # We already mounted in our google drive.\n","    # Enter the foler where you put files in:\n","    %cd '/content/CNN'\n","\n","    # Current working directory:\n","    !pwd\n","\n","    # What files are there:\n","    !ls\n","   \n","    \n","except ModuleNotFoundError:\n","    running_in_colab = False\n","    print(\n","        \"I guess you are running locally. If you get this message in Colab, check the files.\"\n","    )"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"elapsed":7,"status":"ok","timestamp":1678503739212,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"gXh1OScaOJ22","outputId":"1bbef0a7-2c39-44b2-e16d-7e2a56751101"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'/content/gdrive/.shortcut-targets-by-id/1Fl8lRtFtcplDqGhTruxlsGlVDZByXON0/NN_DL/CNN'"]},"execution_count":2,"metadata":{},"output_type":"execute_result"}],"source":["%pwd"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3786,"status":"ok","timestamp":1678503742993,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"1vbrnVHU9FfZ","outputId":"b0494e46-a60a-4c17-e2d3-bee8b5919ecc"},"outputs":[{"name":"stdout","output_type":"stream","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: torchsummary in /usr/local/lib/python3.9/dist-packages (1.5.1)\n"]}],"source":["!pip install torchsummary\n"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3677,"status":"ok","timestamp":1678566092119,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"PgcasvQJnoDM","outputId":"eaeab48f-b16a-4871-8354-531de6323fe1"},"outputs":[{"name":"stdout","output_type":"stream","text":["cuda\n"]}],"source":["\n","import torch \n","import torch.nn as nn\n","import torch.nn.functional as F #activation functions\n","from torch.optim import SGD\n","import seaborn as sns\n","import matplotlib.pyplot as plt \n","# Importing Libraries\n","import torch\n","import torchvision\n","import torchvision.transforms as transforms\n","from torchsummary import summary\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","from torch.optim.lr_scheduler import StepLR, ReduceLROnPlateau\n","\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","device = \"cuda\" if torch.cuda.is_available else \"cpu\"\n","print(device)"]},{"cell_type":"markdown","metadata":{"id":"BPSSO72sWvXG"},"source":["#2. Import libraries and dataset"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6827,"status":"ok","timestamp":1678566098943,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"nCE35PtmF53V","outputId":"c406e9c4-1686-4331-b1ce-b576cc46b3d8"},"outputs":[{"name":"stdout","output_type":"stream","text":["Files already downloaded and verified\n","Files already downloaded and verified\n"]}],"source":["import torch\n","import torchvision\n","import torchvision.transforms as transforms\n","\n","transform = transforms.Compose(\n","    [transforms.ToTensor(),\n","     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])\n","\n","\n","#compose normalisations and pipelines\n","# load test set and train set\n","trainset = torchvision.datasets.CIFAR10(root='./data', train=True,\n","                                        download=True, transform=transform)\n","trainloader = torch.utils.data.DataLoader(trainset, batch_size=4,\n","                                          shuffle=True, num_workers=2)\n","testset = torchvision.datasets.CIFAR10(root='./data', train=False,\n","                                       download=True, transform=transform)\n","testloader = torch.utils.data.DataLoader(testset, batch_size=4,\n","                                         shuffle=False, num_workers=2)\n","\n","classes = ('plane', 'car', 'bird', 'cat',\n","           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')"]},{"cell_type":"code","execution_count":4,"metadata":{"executionInfo":{"elapsed":6,"status":"ok","timestamp":1678566098943,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"Z5y5HSjrV7gO"},"outputs":[],"source":["#cuda utils\n","def get_default_device():\n","    \"\"\"Pick GPU if available, else CPU\"\"\"\n","    if torch.cuda.is_available():\n","        return torch.device('cuda')\n","    else:\n","        return torch.device('cpu')\n","    \n","def to_device(data, device):\n","    \"\"\"Move tensor(s) to chosen device\"\"\"\n","    if isinstance(data, (list,tuple)):\n","        return [to_device(x, device) for x in data]\n","    return data.to(device, non_blocking=True)\n","\n","\n","def save_checkpoint(model,filept,loss_list,lossf):\n","  torch.save(model.state_dict(),filept) #f is something like 'resnet_nest_flood_bpoint15.pt'\n","  with open(lossf, \"w\") as output: #lossf is like \"file_flood_nest.txt\"\n","    output.write(str(loss_list))\n","\n"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":156},"executionInfo":{"elapsed":760,"status":"ok","timestamp":1678566099698,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"OJ2npuCWHD0V","outputId":"55657406-9fcb-48a9-85db-b64eb15399a7"},"outputs":[{"name":"stdout","output_type":"stream","text":[" deer   dog  bird  frog\n"]},{"data":{"image/png":"\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["import matplotlib.pyplot as plt\n","import numpy as np\n","\n","# functions to show an image\n","\n","\n","def imshow(img):\n","    img = img / 2 + 0.5     # unnormalize\n","    npimg = img.numpy()     # convert to numpy\n","    plt.imshow(np.transpose(npimg, (1, 2, 0)))\n","\n","\n","# get some random training images\n","dataiter = iter(trainloader)\n","images, labels = next(dataiter) #.next()\n","\n","# show images\n","imshow(torchvision.utils.make_grid(images))\n","# print labels\n","print(' '.join('%5s' % classes[labels[j]] for j in range(4))) #lists out the labels as defined in classes list"]},{"cell_type":"markdown","metadata":{"id":"OllvllBZ_OaT"},"source":["# Working with ResNet-18 for CIFAR-10"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1560,"status":"ok","timestamp":1678566103923,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"H8sf-oK5TuPi","outputId":"8defaf79-5229-4d97-9a4a-af5aa875165f"},"outputs":[{"name":"stderr","output_type":"stream","text":["Downloading: \"https://github.com/pytorch/vision/zipball/v0.10.0\" to /root/.cache/torch/hub/v0.10.0.zip\n","/usr/local/lib/python3.9/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=None`.\n","  warnings.warn(msg)\n"]},{"data":{"text/plain":["ResNet(\n","  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n","  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","  (relu): ReLU(inplace=True)\n","  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n","  (layer1): Sequential(\n","    (0): BasicBlock(\n","      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","    (1): BasicBlock(\n","      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","  )\n","  (layer2): Sequential(\n","    (0): BasicBlock(\n","      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (downsample): Sequential(\n","        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)\n","        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","    )\n","    (1): BasicBlock(\n","      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","  )\n","  (layer3): Sequential(\n","    (0): BasicBlock(\n","      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (downsample): Sequential(\n","        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)\n","        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","    )\n","    (1): BasicBlock(\n","      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","  )\n","  (layer4): Sequential(\n","    (0): BasicBlock(\n","      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (downsample): Sequential(\n","        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n","        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","    )\n","    (1): BasicBlock(\n","      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    )\n","  )\n","  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\n","  (fc): Linear(in_features=512, out_features=1000, bias=True)\n",")"]},"execution_count":6,"metadata":{},"output_type":"execute_result"}],"source":["model = torch.hub.load('pytorch/vision:v0.10.0', 'resnet18', pretrained=False)\n","model.eval()"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":215,"status":"ok","timestamp":1678566106392,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"TuQbkZZ2HLXp","outputId":"28926323-7530-4af5-f105-2788fea5abd0"},"outputs":[{"name":"stdout","output_type":"stream","text":["cuda:0\n"]}],"source":["device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","\n","# Assume that we are on a CUDA machine, then this should print a CUDA device:\n","\n","print(device)"]},{"cell_type":"code","execution_count":8,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1678566106393,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"d3WuL7sQWoBv"},"outputs":[],"source":["def predict_accuracy(model,trainloader):\n","  correct = 0\n","  total = 0\n","  with torch.no_grad(): #no grad so that we don't change the weights\n","      for data in trainloader:\n","          images, labels = data\n","          outputs = model(images)\n","          _, predicted = torch.max(outputs.data, 1)\n","          total += labels.size(0)\n","          correct += (predicted == labels).sum().item()\n","  print('Accuracy of the network on the 12500 training images: %d %%' % (\n","      100 * correct / total))\n","  return (correct,total,correct/total)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":106654,"status":"ok","timestamp":1678489961636,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"yGxrKaIXPVtZ","outputId":"2e12dfa3-a984-47ce-9a59-49c8e99f6768"},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy of the network on the 12500 training images: 0 %\n"]},{"data":{"text/plain":["(0, 50000, 0.0)"]},"execution_count":12,"metadata":{},"output_type":"execute_result"}],"source":["predict_accuracy(model,trainloader)"]},{"cell_type":"code","execution_count":16,"metadata":{"executionInfo":{"elapsed":167,"status":"ok","timestamp":1678567019584,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"DHn6UzX1_eZ4"},"outputs":[],"source":["import torch.optim as optim\n","\n","criterion = nn.CrossEntropyLoss()\n","optimizer = optim.SGD(model.parameters(), nesterov=True, momentum=0.9,lr=0.001)"]},{"cell_type":"code","execution_count":17,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4668415,"status":"ok","timestamp":1678571689334,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"njInrfXM_eXm","outputId":"9eaa746f-a550-4c8b-c193-162a40c02c04"},"outputs":[{"name":"stdout","output_type":"stream","text":["[1,  2000] loss: 2.025\n","[1,  4000] loss: 1.636\n","[1,  6000] loss: 1.519\n","[1,  8000] loss: 1.457\n","[1, 10000] loss: 1.368\n","[1, 12000] loss: 1.308\n","0.5\n","[2,  2000] loss: 1.202\n","[2,  4000] loss: 1.171\n","[2,  6000] loss: 1.123\n","[2,  8000] loss: 1.110\n","[2, 10000] loss: 1.100\n","[2, 12000] loss: 1.068\n","1.0\n","[3,  2000] loss: 0.948\n","[3,  4000] loss: 0.925\n","[3,  6000] loss: 0.937\n","[3,  8000] loss: 0.924\n","[3, 10000] loss: 0.911\n","[3, 12000] loss: 0.922\n","0.75\n","[4,  2000] loss: 0.770\n","[4,  4000] loss: 0.779\n","[4,  6000] loss: 0.799\n","[4,  8000] loss: 0.785\n","[4, 10000] loss: 0.789\n","[4, 12000] loss: 0.774\n","0.5\n","[5,  2000] loss: 0.639\n","[5,  4000] loss: 0.659\n","[5,  6000] loss: 0.686\n","[5,  8000] loss: 0.684\n","[5, 10000] loss: 0.671\n","[5, 12000] loss: 0.665\n","0.75\n","[6,  2000] loss: 0.522\n","[6,  4000] loss: 0.528\n","[6,  6000] loss: 0.566\n","[6,  8000] loss: 0.604\n","[6, 10000] loss: 0.583\n","[6, 12000] loss: 0.580\n","1.0\n","[7,  2000] loss: 0.415\n","[7,  4000] loss: 0.437\n","[7,  6000] loss: 0.467\n","[7,  8000] loss: 0.474\n","[7, 10000] loss: 0.483\n","[7, 12000] loss: 0.519\n","0.5\n","[8,  2000] loss: 0.329\n","[8,  4000] loss: 0.365\n","[8,  6000] loss: 0.389\n","[8,  8000] loss: 0.394\n","[8, 10000] loss: 0.426\n","[8, 12000] loss: 0.423\n","1.0\n","[9,  2000] loss: 0.258\n","[9,  4000] loss: 0.299\n","[9,  6000] loss: 0.311\n","[9,  8000] loss: 0.357\n","[9, 10000] loss: 0.355\n","[9, 12000] loss: 0.365\n","0.5\n","[10,  2000] loss: 0.226\n","[10,  4000] loss: 0.249\n","[10,  6000] loss: 0.261\n","[10,  8000] loss: 0.289\n","[10, 10000] loss: 0.302\n","[10, 12000] loss: 0.318\n","1.0\n","Finished Training\n"]}],"source":["loss_values = []\n","accuracies = []\n","for epoch in range(10):  # loop over the dataset multiple times\n","    total =0\n","    correct = 0\n","\n","    running_loss = 0.0\n","    for i, data in enumerate(trainloader, 0):\n","        # get the inputs\n","        inputs, labels = data\n","\n","        # zero the parameter gradients\n","        optimizer.zero_grad()\n","\n","        # forward + backward + optimize\n","        outputs = model(inputs)\n","        loss = criterion(outputs, labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        # print statistics\n","        running_loss += loss.item()\n","        loss_values.append(loss)\n","        if i % 2000 == 1999:    # print every 2000 mini-batches\n","            print('[%d, %5d] loss: %.3f' %\n","                  (epoch + 1, i + 1, running_loss / 2000))\n","            running_loss = 0.0\n","    #caculate accuracy\n","    with torch.no_grad():\n","        _, predicted = torch.max(outputs.data, 1)\n","        total += labels.size(0)\n","        correct += (predicted == labels).sum().item()\n","        print(correct/total)\n","        accuracies.append(correct/total)\n","\n","print('Finished Training')"]},{"cell_type":"code","execution_count":18,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":151,"status":"ok","timestamp":1678572754869,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"ZZBc4ew8igK3","outputId":"bae916f6-873e-4d10-c7cd-51dcaa2a78bf"},"outputs":[{"data":{"text/plain":["[0.5, 1.0, 0.75, 0.5, 0.75, 1.0, 0.5, 1.0, 0.5, 1.0]"]},"execution_count":18,"metadata":{},"output_type":"execute_result"}],"source":["accuracies"]},{"cell_type":"code","execution_count":19,"metadata":{"executionInfo":{"elapsed":199,"status":"ok","timestamp":1678572766650,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"kjv71jE3iTWZ"},"outputs":[],"source":["loss_values_list = [el.item() for el in loss_values]\n","#loss_values_list"]},{"cell_type":"code","execution_count":20,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"executionInfo":{"elapsed":568,"status":"ok","timestamp":1678572768618,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"AT1E3rlqiWEE","outputId":"ff53a6da-28ee-41ae-bef1-0978a3d248b0"},"outputs":[{"data":{"text/plain":["[\u003cmatplotlib.lines.Line2D at 0x7f92349a1d90\u003e]"]},"execution_count":20,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["plt.plot(loss_values_list)\n"]},{"cell_type":"code","execution_count":21,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"executionInfo":{"elapsed":189,"status":"ok","timestamp":1678572773422,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"0k0A-egYib57","outputId":"a3fcf5de-c5e2-4e4e-b383-8bbdca796a4e"},"outputs":[{"data":{"text/plain":["[\u003cmatplotlib.lines.Line2D at 0x7f916804cb80\u003e]"]},"execution_count":21,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["plt.plot(accuracies)"]},{"cell_type":"code","execution_count":27,"metadata":{"executionInfo":{"elapsed":1155,"status":"ok","timestamp":1678577867394,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"Ks1jG9Q9VC9g"},"outputs":[],"source":["import csv\n","torch.save(model.state_dict(),'resnet_sgdnest.pt')\n","#save loss and accuracies\n","# with open('GFG', 'w') as f:\n","      \n","#     # using csv.writer method from CSV package\n","#     write = csv.writer(f)\n","      \n","#     write.writerows(loss_values_)\n","#     write.writerows(accuracies)"]},{"cell_type":"code","execution_count":28,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":131854,"status":"ok","timestamp":1678578897314,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"v2EpZCRsQsRx","outputId":"dcf3cdda-eba7-476d-c219-2c08c382e341"},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy of the network on the 12500 training images: 93 %\n"]}],"source":["correct = 0\n","total = 0\n","with torch.no_grad(): #no grad so that we don't change the weights\n","    for data in trainloader:\n","        images, labels = data\n","        outputs = model(images)\n","        _, predicted = torch.max(outputs.data, 1)\n","        total += labels.size(0)\n","        correct += (predicted == labels).sum().item()\n","\n","print('Accuracy of the network on the 12500 training images: %d %%' % (\n","    100 * correct / total))"]},{"cell_type":"code","execution_count":23,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":28734,"status":"ok","timestamp":1678572937724,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"qfPnwQ4IRP6-","outputId":"bcea93bd-c6d3-4a1a-fcb6-a1c479a43712"},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy of the network on the 10000 test images: 70 %\n"]}],"source":["correct = 0\n","total = 0\n","with torch.no_grad(): #no grad so that we don't change the weights\n","    for data in testloader:\n","        images, labels = data\n","        outputs = model(images)\n","        _, predicted = torch.max(outputs.data, 1)\n","        total += labels.size(0)\n","        correct += (predicted == labels).sum().item()\n","\n","print('Accuracy of the network on the 10000 test images: %d %%' % (\n","    100 * correct / total))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EG2_bR_m3ORY"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2ZSumVvJ3OOr"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9VTf1Ppb3OLu"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0ZaW9hcd3OJG"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wGErQr0Q3OGw"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HpG-YqVc3OEk"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XUqwA5Ey3OCT"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jWheh8GR3N_p"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"99lUJB083a60"},"source":["# 2. Flooding"]},{"cell_type":"code","execution_count":24,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":17,"status":"ok","timestamp":1678572937724,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"LM6prK8n3jLK","outputId":"5b030cd5-436c-426f-f14b-b9ddf39a582f"},"outputs":[{"name":"stderr","output_type":"stream","text":["Using cache found in /root/.cache/torch/hub/pytorch_vision_v0.10.0\n","/usr/local/lib/python3.9/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=None`.\n","  warnings.warn(msg)\n"]}],"source":["model_flood = torch.hub.load('pytorch/vision:v0.10.0', 'resnet18', pretrained=False)\n","#model_flood"]},{"cell_type":"code","execution_count":25,"metadata":{"executionInfo":{"elapsed":16,"status":"ok","timestamp":1678572937725,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"VW51Tfws3s9l"},"outputs":[],"source":["optimizer_flood = optim.SGD(model_flood.parameters(), nesterov=True, momentum=0.9,lr=0.001)"]},{"cell_type":"code","execution_count":26,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":31387,"status":"ok","timestamp":1678577866239,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"h8WoqnC73zeU","outputId":"75c3c90a-e730-440f-b941-3115ecffd42f"},"outputs":[{"name":"stdout","output_type":"stream","text":["[1,  2000] loss: 2.379\n","[1,  4000] loss: 2.046\n","[1,  6000] loss: 1.929\n","[1,  8000] loss: 1.853\n","[1, 10000] loss: 1.770\n","[1, 12000] loss: 1.915\n","0.5\n","[2,  2000] loss: 1.744\n","[2,  4000] loss: 1.675\n","[2,  6000] loss: 1.607\n","[2,  8000] loss: 1.584\n","[2, 10000] loss: 1.520\n","[2, 12000] loss: 1.467\n","0.5\n","[3,  2000] loss: 1.442\n","[3,  4000] loss: 1.386\n","[3,  6000] loss: 1.359\n","[3,  8000] loss: 1.352\n","[3, 10000] loss: 1.263\n","[3, 12000] loss: 1.286\n","1.0\n","[4,  2000] loss: 1.198\n","[4,  4000] loss: 1.179\n","[4,  6000] loss: 1.163\n","[4,  8000] loss: 1.159\n","[4, 10000] loss: 1.156\n","[4, 12000] loss: 1.159\n","0.5\n","[5,  2000] loss: 1.087\n","[5,  4000] loss: 1.081\n","[5,  6000] loss: 1.046\n","[5,  8000] loss: 1.049\n","[5, 10000] loss: 1.025\n","[5, 12000] loss: 1.032\n","0.75\n","[6,  2000] loss: 0.954\n","[6,  4000] loss: 0.989\n","[6,  6000] loss: 0.920\n","[6,  8000] loss: 0.961\n","[6, 10000] loss: 0.941\n","[6, 12000] loss: 0.941\n","0.25\n","[7,  2000] loss: 0.839\n","[7,  4000] loss: 0.863\n","[7,  6000] loss: 0.870\n","[7,  8000] loss: 0.867\n","[7, 10000] loss: 0.855\n","[7, 12000] loss: 0.863\n","0.75\n","[8,  2000] loss: 0.762\n","[8,  4000] loss: 0.770\n","[8,  6000] loss: 0.785\n","[8,  8000] loss: 0.777\n","[8, 10000] loss: 0.808\n","[8, 12000] loss: 0.797\n","0.5\n","[9,  2000] loss: 0.715\n","[9,  4000] loss: 0.695\n","[9,  6000] loss: 0.731\n","[9,  8000] loss: 0.742\n","[9, 10000] loss: 0.728\n","[9, 12000] loss: 0.732\n","0.5\n","[10,  2000] loss: 0.630\n","[10,  4000] loss: 0.639\n","[10,  6000] loss: 0.658\n","[10,  8000] loss: 0.681\n","[10, 10000] loss: 0.653\n","[10, 12000] loss: 0.690\n","1.0\n","Finished Training\n"]}],"source":["loss_values_flood = []\n","accuracies_flood = []\n","b=0.15\n","for epoch in range(10):  # loop over the dataset multiple times\n","    total =0\n","    correct = 0\n","\n","    running_loss = 0.0\n","    for i, data in enumerate(trainloader, 0):\n","        # get the inputs\n","        inputs, labels = data\n","\n","        # zero the parameter gradients\n","        optimizer_flood.zero_grad()\n","\n","        # forward + backward + optimize\n","        outputs = model_flood(inputs)\n","        loss = criterion(outputs, labels)\n","        flood = (loss-b).abs()+b \n","        flood.backward()\n","        optimizer_flood.step()\n","\n","        # print statistics\n","        running_loss += loss.item()\n","        loss_values_flood.append(flood.item())\n","        if i % 2000 == 1999:    # print every 2000 mini-batches\n","            print('[%d, %5d] loss: %.3f' %\n","                  (epoch + 1, i + 1, running_loss / 2000))\n","            running_loss = 0.0\n","    #caculate accuracy\n","    with torch.no_grad():\n","        _, predicted = torch.max(outputs.data, 1)\n","        total += labels.size(0)\n","        correct += (predicted == labels).sum().item()\n","        print(correct/total)\n","        accuracies_flood.append(correct/total)\n","\n","print('Finished Training')"]},{"cell_type":"code","execution_count":29,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":141460,"status":"ok","timestamp":1678579038771,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"OsdwfddY3N9C","outputId":"c0c48e57-2979-47c9-936b-296be3682cb6"},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy of the network on the 12500 training images: 78 %\n"]},{"data":{"text/plain":["(39157, 50000, 0.78314)"]},"execution_count":29,"metadata":{},"output_type":"execute_result"}],"source":["predict_accuracy(model_flood,trainloader)"]},{"cell_type":"code","execution_count":35,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":30500,"status":"ok","timestamp":1678579345297,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"rTAC9Ass3N6a","outputId":"bba062fa-9657-43e0-f3ce-121fdce588af"},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy of the network on the 12500 training images: 69 %\n"]},{"data":{"text/plain":["(6903, 10000, 0.6903)"]},"execution_count":35,"metadata":{},"output_type":"execute_result"}],"source":["predict_accuracy(model_flood,testloader)"]},{"cell_type":"code","execution_count":31,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"executionInfo":{"elapsed":655,"status":"ok","timestamp":1678579069765,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"U2UtYZ003N3z","outputId":"4c00c885-a4cf-4aeb-9444-2db2362f1d6a"},"outputs":[{"data":{"text/plain":["[\u003cmatplotlib.lines.Line2D at 0x7f89740b63a0\u003e]"]},"execution_count":31,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["plt.plot(loss_values_flood)"]},{"cell_type":"code","execution_count":32,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"executionInfo":{"elapsed":7,"status":"ok","timestamp":1678579069766,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"UWnJga613N04","outputId":"79ba0112-4f5f-453d-f8d8-078c11de3172"},"outputs":[{"data":{"text/plain":["[\u003cmatplotlib.lines.Line2D at 0x7f91af8ebbe0\u003e]"]},"execution_count":32,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["plt.plot(accuracies_flood)"]},{"cell_type":"code","execution_count":33,"metadata":{"executionInfo":{"elapsed":399,"status":"ok","timestamp":1678579249458,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"ciInWwQe3NyY"},"outputs":[],"source":["import csv\n","torch.save(model.state_dict(),'resnet_nest_flood_bpoint15.pt')\n","#save loss and accuracies\n","# with open('GFG', 'w') as f:\n","      \n","#     # using csv.writer method from CSV package\n","#     write = csv.writer(f)\n","      \n","#     write.writerows(loss_values_list)\n","#     write.writerows(accuracies)\n","\n","\n","with open(\"file_flood_nest.txt\", \"w\") as output:\n","    output.write(str(loss_values_list))"]},{"cell_type":"code","execution_count":34,"metadata":{"executionInfo":{"elapsed":132,"status":"ok","timestamp":1678579269869,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"Kn1ogmUzRPu7"},"outputs":[],"source":["b_tracker ={0.15:loss_values_list}"]},{"cell_type":"code","execution_count":36,"metadata":{"executionInfo":{"elapsed":127,"status":"ok","timestamp":1678579433294,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"4_uawbZiIQz2"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"e30wk_LgH0sS"},"source":["#3. Trying a more aggressive loss value since accuracy is roughly the same on test set and lower on training set."]},{"cell_type":"code","execution_count":49,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":284,"status":"ok","timestamp":1678587216572,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"OXd5HReKIh94","outputId":"78ad6d38-9a62-44fb-8529-eeb3f0017286"},"outputs":[{"name":"stderr","output_type":"stream","text":["Using cache found in /root/.cache/torch/hub/pytorch_vision_v0.10.0\n"]}],"source":["model_flood2 = torch.hub.load('pytorch/vision:v0.10.0', 'resnet18', weights=None)"]},{"cell_type":"code","execution_count":50,"metadata":{"executionInfo":{"elapsed":2,"status":"ok","timestamp":1678587216572,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"KO8lqX2xNMC7"},"outputs":[],"source":["optimizer_flood2 = optim.SGD(model_flood2.parameters(), nesterov=True, momentum=0.9,lr=0.001)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"_LEXGv4IH0TX"},"outputs":[{"name":"stdout","output_type":"stream","text":["[1,  2000] loss: 2.357\n","[1,  4000] loss: 2.050\n","[1,  6000] loss: 1.927\n","[1,  8000] loss: 1.853\n","[1, 10000] loss: 1.766\n","[1, 12000] loss: 1.704\n","0.25\n","[2,  2000] loss: 1.590\n","[2,  4000] loss: 1.543\n","[2,  6000] loss: 1.507\n","[2,  8000] loss: 1.457\n","[2, 10000] loss: 1.429\n","[2, 12000] loss: 1.385\n","0.5\n","[3,  2000] loss: 1.306\n","[3,  4000] loss: 1.279\n","[3,  6000] loss: 1.257\n","[3,  8000] loss: 1.258\n","[3, 10000] loss: 1.217\n","[3, 12000] loss: 1.222\n","0.75\n","[4,  2000] loss: 1.137\n","[4,  4000] loss: 1.143\n","[4,  6000] loss: 1.103\n","[4,  8000] loss: 1.119\n","[4, 10000] loss: 1.088\n","[4, 12000] loss: 1.078\n","1.0\n","[5,  2000] loss: 1.020\n","[5,  4000] loss: 0.996\n","[5,  6000] loss: 0.996\n","[5,  8000] loss: 0.986\n","[5, 10000] loss: 1.002\n","[5, 12000] loss: 0.973\n","0.75\n","[6,  2000] loss: 0.914\n","[6,  4000] loss: 0.933\n","[6,  6000] loss: 0.894\n","[6,  8000] loss: 0.880\n","[6, 10000] loss: 0.879\n","[6, 12000] loss: 0.895\n","0.75\n","[7,  2000] loss: 0.797\n","[7,  4000] loss: 0.815\n","[7,  6000] loss: 0.815\n","[7,  8000] loss: 0.815\n","[7, 10000] loss: 0.819\n","[7, 12000] loss: 0.846\n","1.0\n","[8,  2000] loss: 0.722\n","[8,  4000] loss: 0.762\n","[8,  6000] loss: 0.748\n","[8,  8000] loss: 0.745\n","[8, 10000] loss: 0.752\n","[8, 12000] loss: 0.747\n","0.5\n","[9,  2000] loss: 0.668\n","[9,  4000] loss: 0.692\n","[9,  6000] loss: 0.682\n","[9,  8000] loss: 0.687\n","[9, 10000] loss: 0.696\n","[9, 12000] loss: 0.699\n","0.75\n","[10,  2000] loss: 0.595\n","[10,  4000] loss: 0.618\n","[10,  6000] loss: 0.641\n","[10,  8000] loss: 0.627\n","[10, 10000] loss: 0.654\n","[10, 12000] loss: 0.655\n","1.0\n","Finished Training\n"]}],"source":["loss_values_flood2 = []\n","accuracies_flood2 = []\n","b=0.05\n","for epoch in range(10):  # loop over the dataset multiple times\n","    total =0\n","    correct = 0\n","\n","    running_loss = 0.0\n","    for i, data in enumerate(trainloader, 0):\n","        # get the inputs\n","        inputs, labels = data\n","\n","        # zero the parameter gradients\n","        optimizer_flood2.zero_grad()\n","\n","        # forward + backward + optimize\n","        outputs = model_flood2(inputs)\n","        loss = criterion(outputs, labels)\n","        flood = (loss-b).abs()+b \n","        flood.backward()\n","        optimizer_flood2.step()\n","\n","        # print statistics\n","        running_loss += loss.item()\n","        loss_values_flood2.append(flood.item())\n","        if i % 2000 == 1999:    # print every 2000 mini-batches\n","            print('[%d, %5d] loss: %.3f' %\n","                  (epoch + 1, i + 1, running_loss / 2000))\n","            running_loss = 0.0\n","    #caculate accuracy\n","    with torch.no_grad():\n","        _, predicted = torch.max(outputs.data, 1)\n","        total += labels.size(0)\n","        correct += (predicted == labels).sum().item()\n","        print(correct/total)\n","        accuracies_flood2.append(correct/total)\n","\n","print('Finished Training')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"pokHkETIH0Mt"},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy of the network on the 12500 training images: 81 %\n"]},{"data":{"text/plain":["(40721, 50000, 0.81442)"]},"execution_count":52,"metadata":{},"output_type":"execute_result"}],"source":["predict_accuracy(model_flood2,trainloader)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"bqLDChzEH0FU"},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy of the network on the 12500 training images: 70 %\n"]},{"data":{"text/plain":["(7034, 10000, 0.7034)"]},"execution_count":53,"metadata":{},"output_type":"execute_result"}],"source":["predict_accuracy(model_flood2,testloader)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xS6Oea-UHz0y"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gm0io9cmHzxx"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p6U8ZNzkHzuN"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cR3CoN-oHzrW"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-Zpn1hPJHzlf"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wEiaKalHHzgT"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"u3IRTguyHzdS"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iEl8nQWOQMEZ"},"outputs":[],"source":["# #!/usr/bin/python\n","# # -*- encoding: utf-8 -*-\n","\n","# import os\n","# import torch\n","# import torch.nn as nn\n","# import torch.optim as optim\n","# from torchvision import datasets, transforms\n","# from torch.autograd import Variable\n","# from simple_model import ft_net\n","# import matplotlib.pyplot as plt\n","\n","# h, w = 256, 128\n","# data_dir = '/home/niruhan/Personal/paper/Market-1501-v15.09.15/pytorch'\n","# batchsize = 2\n","# num_epochs = 10\n","# use_gpu = torch.cuda.is_available()\n","\n","# transform_train_list = [\n","#     transforms.Resize((h, w), interpolation=3),\n","#     transforms.Pad(10),\n","#     transforms.ToTensor(),\n","#     transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n","# ]\n","\n","# transform_val_list = [\n","#     transforms.Resize(size=(h, w), interpolation=3),  # Image.BICUBIC\n","#     transforms.ToTensor(),\n","#     transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n","# ]\n","\n","# data_transforms = {\n","#     'train': transforms.Compose(transform_train_list),\n","#     'val': transforms.Compose(transform_val_list),\n","# }\n","\n","# image_datasets = {}\n","# image_datasets['train'] = datasets.ImageFolder(os.path.join(data_dir, 'train'),\n","#                                                data_transforms['train'])\n","# image_datasets['val'] = datasets.ImageFolder(os.path.join(data_dir, 'val'),\n","#                                              data_transforms['val'])\n","\n","# dataloaders = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=batchsize, shuffle=True, num_workers=8)\n","#                for x in ['train', 'val']}\n","\n","# class_names = image_datasets['train'].classes\n","# dataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'val']}\n","\n","# model = ft_net(len(class_names))\n","# criterion = nn.CrossEntropyLoss()\n","\n","# lr = 0.05\n","# optim_name = optim.SGD\n","# ignored_params = list(map(id, model.classifier.parameters()))\n","# base_params = filter(lambda p: id(p) not in ignored_params, model.parameters())\n","# classifier_params = model.classifier.parameters()\n","# optimizer = optim_name([\n","#     {'params': base_params, 'lr': 0.1 * lr},\n","#     {'params': classifier_params, 'lr': lr}\n","# ], weight_decay=5e-4, momentum=0.9, nesterov=True)\n","\n","# y_loss = {}  # loss history\n","# y_loss['train'] = []\n","# y_loss['val'] = []\n","# y_err = {}\n","# y_err['train'] = []\n","# y_err['val'] = []\n","\n","# x_epoch = []\n","# fig = plt.figure()\n","# ax0 = fig.add_subplot(121, title=\"loss\")\n","# ax1 = fig.add_subplot(122, title=\"top1err\")\n","\n","\n","# def draw_curve(current_epoch):\n","#     x_epoch.append(current_epoch)\n","#     ax0.plot(x_epoch, y_loss['train'], 'bo-', label='train')\n","#     ax0.plot(x_epoch, y_loss['val'], 'ro-', label='val')\n","#     ax1.plot(x_epoch, y_err['train'], 'bo-', label='train')\n","#     ax1.plot(x_epoch, y_err['val'], 'ro-', label='val')\n","#     if current_epoch == 0:\n","#         ax0.legend()\n","#         ax1.legend()\n","#     fig.savefig(os.path.join('./lossGraphs', 'train.jpg'))\n","\n","\n","# for epoch in range(num_epochs):\n","#     print('Epoch {}/{}'.format(epoch, num_epochs - 1))\n","#     print('-' * 10)\n","#     # Each epoch has a training and validation phase\n","#     for phase in ['train', 'val']:\n","#         if phase == 'train':\n","#             model.train(True)  # Set model to training mode\n","#         else:\n","#             model.train(False)  # Set model to evaluate mode\n","\n","#         running_loss = 0.0\n","#         running_corrects = 0.0\n","\n","#         count = 0\n","#         # Iterate over data.\n","#         for data in dataloaders[phase]:\n","#             if count \u003e 10:\n","#                 break\n","\n","#             count = count + 1\n","#             # get a batch of inputs\n","#             inputs, labels = data\n","#             now_batch_size, c, h, w = inputs.shape\n","#             if now_batch_size \u003c batchsize:  # skip the last batch\n","#                 continue\n","#             # print(inputs.shape)\n","#             # wrap them in Variable, if gpu is used, we transform the data to cuda.\n","#             if use_gpu:\n","#                 inputs = Variable(inputs.cuda())\n","#                 labels = Variable(labels.cuda())\n","#             else:\n","#                 inputs, labels = Variable(inputs), Variable(labels)\n","\n","#             # zero the parameter gradients\n","#             optimizer.zero_grad()\n","\n","#             # -------- forward --------\n","#             outputs = model(inputs)\n","#             _, preds = torch.max(outputs.data, 1)\n","#             loss = criterion(outputs, labels)\n","\n","#             del inputs\n","\n","#             # -------- backward + optimize --------\n","#             # only if in training phase\n","#             if phase == 'train':\n","#                 loss.backward()\n","#                 optimizer.step()\n","\n","#             # statistics\n","#             running_loss += loss.item() * now_batch_size\n","#             del loss\n","#             running_corrects += float(torch.sum(preds == labels.data))\n","\n","#         epoch_loss = running_loss / dataset_sizes[phase]\n","#         epoch_acc = running_corrects / dataset_sizes[phase]\n","\n","#         print('{} Loss: {:.4f} Acc: {:.4f}'.format(phase, epoch_loss, epoch_acc))\n","\n","#         y_loss[phase].append(epoch_loss)\n","#         y_err[phase].append(1.0 - epoch_acc)\n","\n","#         # deep copy the model\n","#         if phase == 'val':\n","#             draw_curve(epoch)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Evv9F8GSVWWO"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mP4yfbRiVWTe"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HYFxehelVWQx"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Di_2-Sv-VV4_"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PiXm0MosVV2e"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vHo8nog1VVzy"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yRqWGpCCVVww"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4YazGZR3VVuO"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WY7pZezrVVrN"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ALXOLSD6VVlt"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_qvvtDHNVVfK"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DP2XIL8VQL9u"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pMh--2-NQL2Q"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"agXyZwZTQLrz"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3weQEHhI_eUx"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"H0N1-9p9_eSM"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"63Fo6PBvVXeA"},"source":["## Flooding with Resnet-CIFAR10"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lP7-zBTL_ePt"},"outputs":[],"source":["import torch.optim as optim\n","\n","criterion = nn.CrossEntropyLoss()\n","optimizer = optim.Adam(model.parameters(), lr=0.001)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RSL6od6Q_eMz"},"outputs":[],"source":["flood = (loss-b).abs()+b "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FExLj7xQ_eHx"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XbLWYWoS_eFO"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"he5VTf-s_eCt"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wc-sUxEc_eAT"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FvOLsA7C_d9r"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FsrokG7k_d3b"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aLb3suhd_duk"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"30HG6LAGYFt4"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kYIeQB39YFq0"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"n5G6NVLfYFoJ"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vPIoL97FYFlB"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qlTanHQqYFiH"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sQEB1F2aYFe7"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"A6fUyzhYYFbv"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BytBA8LeYFXK"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Xv5uL0LCYFNr"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"O8GNstDEYFFQ"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BH1BBCVmKuJ2"},"outputs":[],"source":["import torch.nn as nn\n","import torch.nn.functional as F\n","\n","\n","class CNNet(nn.Module):\n","    def __init__(self):\n","        # conv --\u003e maxpool --\u003e conv --\u003e linear ---\u003e linear ---\u003e linear\n","        super(CNNet, self).__init__()\n","        self.conv1 = nn.Conv2d(3, 6, 5)\n","        #docstring: torch.nn.Conv2d(in_channels, out_channels, kernel_size, stride=1, padding=0, dilation=1, groups=1, bias=True, padding_mode='zeros', device=None, dtype=None)\n","        self.pool = nn.MaxPool2d(2, 2)\n","        #docstring: torch.nn.MaxPool2d(kernel_size, stride=None, padding=0, dilation=1, return_indices=False, ceil_mode=False\n","        self.conv2 = nn.Conv2d(6, 16, 5)\n","        self.fc1 = nn.Linear(16 * 5 * 5, 120)\n","        self.fc2 = nn.Linear(120, 84)\n","        self.fc3 = nn.Linear(84, 10)\n","        # need to figure out the dim checks\n","\n","    def forward(self, x):\n","        x = self.pool(F.relu(self.conv1(x))) #get raunak to check architecture\n","        x = self.pool(F.relu(self.conv2(x)))\n","        x = x.view(-1, 16 * 5 * 5) #Returns a new tensor with the same data as the self tensor but of a different shape.\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        x = self.fc3(x)\n","        return x\n","\n","\n","net = CNNet()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OTwYXKz4Ku3A"},"outputs":[],"source":["import torch.optim as optim\n","\n","criterion = nn.CrossEntropyLoss()\n","optimizer = optim.Adam(net.parameters(), lr=0.001)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":242759,"status":"ok","timestamp":1678012305546,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"OvETlM9XNZu7","outputId":"14e57210-ddc8-4c27-af76-700501b333e4"},"outputs":[{"name":"stdout","output_type":"stream","text":["[1,  2000] loss: 1.879\n","[1,  4000] loss: 1.572\n","[1,  6000] loss: 1.493\n","[1,  8000] loss: 1.442\n","[1, 10000] loss: 1.416\n","[1, 12000] loss: 1.371\n","[2,  2000] loss: 1.312\n","[2,  4000] loss: 1.291\n","[2,  6000] loss: 1.282\n","[2,  8000] loss: 1.250\n","[2, 10000] loss: 1.242\n","[2, 12000] loss: 1.225\n","[3,  2000] loss: 1.173\n","[3,  4000] loss: 1.155\n","[3,  6000] loss: 1.185\n","[3,  8000] loss: 1.161\n","[3, 10000] loss: 1.172\n","[3, 12000] loss: 1.157\n","Finished Training\n"]}],"source":["for epoch in range(3):  # loop over the dataset multiple times\n","\n","    running_loss = 0.0\n","    for i, data in enumerate(trainloader, 0):\n","        # get the inputs\n","        inputs, labels = data\n","\n","        # zero the parameter gradients\n","        optimizer.zero_grad()\n","\n","        # forward + backward + optimize\n","        outputs = net(inputs)\n","        loss = criterion(outputs, labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        # print statistics\n","        running_loss += loss.item()\n","        if i % 2000 == 1999:    # print every 2000 mini-batches\n","            print('[%d, %5d] loss: %.3f' %\n","                  (epoch + 1, i + 1, running_loss / 2000))\n","            running_loss = 0.0\n","\n","print('Finished Training')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":156},"executionInfo":{"elapsed":598,"status":"ok","timestamp":1678012306136,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"Xm_opQcuNbAs","outputId":"11de4595-63c2-4051-98e6-6c3aed8cb13b"},"outputs":[{"name":"stdout","output_type":"stream","text":["GroundTruth:    cat  ship  ship plane\n"]},{"data":{"image/png":"\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["dataiter = iter(testloader)\n","images, labels = next(dataiter) #.next()\n","\n","# print images\n","imshow(torchvision.utils.make_grid(images))\n","print('GroundTruth: ', ' '.join('%5s' % classes[labels[j]] for j in range(4)))\n","outputs = net(images)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":600,"status":"ok","timestamp":1678012306731,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"NvXTRpz0PheP","outputId":"a889a95e-d5bf-4433-85b4-1d9f3e7b17f0"},"outputs":[{"data":{"text/plain":["12500"]},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":["len(trainloader)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2,"status":"ok","timestamp":1678012306731,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"TO67ETvmPWNP","outputId":"37414633-9b99-4ebe-d031-3b873e1f3324"},"outputs":[{"name":"stdout","output_type":"stream","text":["Predicted:    cat  ship   car  ship\n"]}],"source":["_, predicted = torch.max(outputs, 1)\n","\n","print('Predicted: ', ' '.join('%5s' % classes[predicted[j]]\n","                              for j in range(4)))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uJ2U6O66TOEn"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"CepWlGs2TOwC"},"source":["## Training Accuracy"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":45353,"status":"ok","timestamp":1678012352083,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"4CYIoJaIQkds","outputId":"bc29268e-bd82-4064-a474-61b0aed734c2"},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy of the network on the 12500 training images: 60 %\n"]}],"source":["correct = 0\n","total = 0\n","with torch.no_grad(): #no grad so that we don't change the weights\n","    for data in trainloader:\n","        images, labels = data\n","        outputs = net(images)\n","        _, predicted = torch.max(outputs.data, 1)\n","        total += labels.size(0)\n","        correct += (predicted == labels).sum().item()\n","\n","print('Accuracy of the network on the 12500 training images: %d %%' % (\n","    100 * correct / total))"]},{"cell_type":"markdown","metadata":{"id":"xa3xDUm2TQwC"},"source":["## Test Accuracy"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9458,"status":"ok","timestamp":1678012361527,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"SIR9EDR3PbS0","outputId":"bfe0267d-5cd6-47d7-8097-fa20d76526b0"},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy of the network on the 10000 test images: 57 %\n"]}],"source":["correct = 0\n","total = 0\n","with torch.no_grad(): #no grad so that we don't change the weights\n","    for data in testloader:\n","        images, labels = data\n","        outputs = net(images)\n","        _, predicted = torch.max(outputs.data, 1)\n","        total += labels.size(0)\n","        correct += (predicted == labels).sum().item()\n","\n","print('Accuracy of the network on the 10000 test images: %d %%' % (\n","    100 * correct / total))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lA-pgbOpRdDT"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"evvdOzjCRkRL"},"source":["## Checking which classes underperformed and overperformed"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10191,"status":"ok","timestamp":1678012371716,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"R_l2qBCWP2f0","outputId":"ed0ea9a9-cbeb-4ee9-a209-fc4bf270a9fb"},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy of plane : 74 %\n","Accuracy of   car : 69 %\n","Accuracy of  bird : 27 %\n","Accuracy of   cat : 59 %\n","Accuracy of  deer : 47 %\n","Accuracy of   dog : 31 %\n","Accuracy of  frog : 62 %\n","Accuracy of horse : 62 %\n","Accuracy of  ship : 63 %\n","Accuracy of truck : 72 %\n"]}],"source":["class_correct = list(0. for i in range(10))\n","class_total = list(0. for i in range(10))\n","with torch.no_grad():\n","    for data in testloader:\n","        images, labels = data\n","        outputs = net(images)\n","        _, predicted = torch.max(outputs, 1)\n","        c = (predicted == labels).squeeze()\n","        for i in range(4):\n","            label = labels[i]\n","            class_correct[label] += c[i].item()\n","            class_total[label] += 1\n","\n","\n","for i in range(10):\n","    print('Accuracy of %5s : %2d %%' % (\n","        classes[i], 100 * class_correct[i] / class_total[i]))"]},{"cell_type":"markdown","metadata":{"id":"5UZMpD2BUd25"},"source":["## Using GPU and saving models"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5310,"status":"ok","timestamp":1678012396678,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"fWPW2wKwP702","outputId":"b6fe908c-fc2a-4a32-fb19-599a77c835dd"},"outputs":[{"data":{"text/plain":["CNNet(\n","  (conv1): Conv2d(3, 6, kernel_size=(5, 5), stride=(1, 1))\n","  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","  (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n","  (fc1): Linear(in_features=400, out_features=120, bias=True)\n","  (fc2): Linear(in_features=120, out_features=84, bias=True)\n","  (fc3): Linear(in_features=84, out_features=10, bias=True)\n",")"]},"execution_count":13,"metadata":{},"output_type":"execute_result"}],"source":["net.to(device)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":216,"status":"ok","timestamp":1678012573673,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"vvctIAtoVR3T","outputId":"28a98faf-8653-4d91-ea82-3df604c282ba"},"outputs":[{"data":{"text/plain":["\u003cAll keys matched successfully\u003e"]},"execution_count":17,"metadata":{},"output_type":"execute_result"}],"source":["torch.save(net.state_dict(), 'cifar10-cnn.pth')\n","model2 = to_device(CNNet(), device)\n","model2.load_state_dict(torch.load('cifar10-cnn.pth'))\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yxSwPCMwVaKO"},"outputs":[],"source":[]}],"metadata":{"accelerator":"GPU","colab":{"authorship_tag":"ABX9TyNE63/eENuswquciZXTPScQ","name":"","provenance":[{"file_id":"1tHdN_JXRuvJleXbnFX8m5RBP4z-f2C2G","timestamp":1678483748599}],"version":""},"gpuClass":"premium","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}