{"cells":[{"cell_type":"markdown","metadata":{"id":"yUaU31blS68J"},"source":["#1. Set up Google Drive"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":37371,"status":"ok","timestamp":1678830072396,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":420},"id":"suVnBfenS26c","outputId":"21113578-5538-4991-d872-b52214a62885"},"outputs":[{"name":"stdout","output_type":"stream","text":["Mounted at /content/gdrive\n","/content/gdrive/.shortcut-targets-by-id/1Fl8lRtFtcplDqGhTruxlsGlVDZByXON0/NN_DL/CNN\n","/content/gdrive/.shortcut-targets-by-id/1Fl8lRtFtcplDqGhTruxlsGlVDZByXON0/NN_DL/CNN\n","AMP-Regularizer      file.txt\t     resnet_nest_flood_bpoint15.pt\n","data\t\t     GFG\t     resnet_sgdnest.pt\n","file_flood_nest.txt  resnet_adam.pt\n"]}],"source":["import os\n","try:\n","    \n","    from google.colab import drive\n","    drive.mount('/content/gdrive')\n","\n","    DRIVE_PATH = '/content/gdrive/My\\ Drive/NN_DL/CNN' # Sim's path\n","    #DRIVE_PATH = '/content/gdrive/My\\ Drive/UCLA/NN_DL/GANS' # Ran's paths\n","    DRIVE_PYTHON_PATH = DRIVE_PATH.replace('\\\\', '')\n","    if not os.path.exists(DRIVE_PYTHON_PATH):\n","      %mkdir $DRIVE_PATH\n","\n","    ## the space in `My Drive` causes some issues,\n","    ## make a symlink to avoid this\n","    SYM_PATH = '/content/CNN'\n","    if not os.path.exists(SYM_PATH):\n","      !ln -s $DRIVE_PATH $SYM_PATH\n","    \n","    running_in_colab = True\n","    \n","    # We already mounted in our google drive.\n","    # Enter the foler where you put files in:\n","    %cd '/content/CNN'\n","\n","    # Current working directory:\n","    !pwd\n","\n","    # What files are there:\n","    !ls\n","   \n","    \n","except ModuleNotFoundError:\n","    running_in_colab = False\n","    print(\n","        \"I guess you are running locally. If you get this message in Colab, check the files.\"\n","    )"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":101,"status":"ok","timestamp":1678830072397,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":420},"id":"gXh1OScaOJ22","outputId":"26d7665b-471d-4a72-e563-b35d02c6a54c"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'/content/gdrive/.shortcut-targets-by-id/1Fl8lRtFtcplDqGhTruxlsGlVDZByXON0/NN_DL/CNN'"]},"execution_count":41,"metadata":{},"output_type":"execute_result"}],"source":["%pwd"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2135,"status":"ok","timestamp":1678830007062,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":420},"id":"1vbrnVHU9FfZ","outputId":"fd696e02-df87-43ea-d84b-eaee5e2aa146"},"outputs":[{"name":"stdout","output_type":"stream","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: torchsummary in /usr/local/lib/python3.9/dist-packages (1.5.1)\n"]}],"source":["!pip install torchsummary\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":70,"status":"ok","timestamp":1678830072398,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":420},"id":"PgcasvQJnoDM","outputId":"9fcbd082-7365-49a1-b0ec-f5cdd862e2bf"},"outputs":[{"name":"stdout","output_type":"stream","text":["cuda\n"]}],"source":["\n","import torch \n","import torch.nn as nn\n","import torch.nn.functional as F #activation functions\n","from torch.optim import SGD\n","import seaborn as sns\n","import matplotlib.pyplot as plt \n","# Importing Libraries\n","import torch\n","import torchvision\n","import torchvision.transforms as transforms\n","from torchsummary import summary\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","from torch.optim.lr_scheduler import StepLR, ReduceLROnPlateau\n","\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","device = \"cuda\" if torch.cuda.is_available else \"cpu\"\n","print(device)"]},{"cell_type":"markdown","metadata":{"id":"BPSSO72sWvXG"},"source":["#2. Import libraries and dataset"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2245,"status":"ok","timestamp":1678830004046,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":420},"id":"Lhbf8ev0D7Vr","outputId":"5da06fc4-a987-4682-e48c-9d0a2a2a2297"},"outputs":[{"name":"stdout","output_type":"stream","text":["cuda\n"]}],"source":["\n","import torch \n","import torch.nn as nn\n","import torch.nn.functional as F #activation functions\n","from torch.optim import SGD\n","import seaborn as sns\n","import matplotlib.pyplot as plt \n","# Importing Libraries\n","import torch\n","import torchvision\n","import torchvision.transforms as transforms\n","from torchsummary import summary\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","from torch.optim.lr_scheduler import StepLR, ReduceLROnPlateau\n","\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","device = \"cuda\" if torch.cuda.is_available else \"cpu\"\n","print(device)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eNIjibSHMbBL"},"outputs":[],"source":["import matplotlib.pyplot as plt\n","\n","label_names = [\n","    'airplane',\n","    'automobile',\n","    'bird',\n","    'cat',\n","    'deer',\n","    'dog',\n","    'frog',\n","    'horse',\n","    'ship',\n","    'truck'\n","]\n","\n","\n","def plot_images(images, cls_true, cls_pred=None):\n","    \"\"\"\n","    Adapted from https://github.com/Hvass-Labs/TensorFlow-Tutorials/\n","    \"\"\"\n","    fig, axes = plt.subplots(3, 3)\n","\n","    for i, ax in enumerate(axes.flat):\n","        # plot img\n","        ax.imshow(images[i, :, :, :], interpolation='spline16')\n","\n","        # show true & predicted classes\n","        cls_true_name = label_names[cls_true[i]]\n","        if cls_pred is None:\n","            xlabel = \"{0} ({1})\".format(cls_true_name, cls_true[i])\n","        else:\n","            cls_pred_name = label_names[cls_pred[i]]\n","            xlabel = \"True: {0}\\nPred: {1}\".format(\n","                cls_true_name, cls_pred_name\n","            )\n","        ax.set_xlabel(xlabel)\n","        ax.set_xticks([])\n","        ax.set_yticks([])\n","\n","    plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kyIIxqTSMfiS"},"outputs":[],"source":["import torch\n","import numpy as np\n","\n","from torchvision import datasets\n","from torchvision import transforms\n","from torch.utils.data.sampler import SubsetRandomSampler\n","\n","\n","def get_train_valid_loader(data_dir,\n","                           batch_size,\n","                           augment,\n","                           random_seed,\n","                           valid_size=0.1,\n","                           shuffle=True,\n","                           show_sample=False,\n","                           num_workers=4,\n","                           pin_memory=False):\n","    \"\"\"\n","    Utility function for loading and returning train and valid\n","    multi-process iterators over the CIFAR-10 dataset. A sample\n","    9x9 grid of the images can be optionally displayed.\n","    If using CUDA, num_workers should be set to 1 and pin_memory to True.\n","    Params\n","    ------\n","    - data_dir: path directory to the dataset.\n","    - batch_size: how many samples per batch to load.\n","    - augment: whether to apply the data augmentation scheme\n","      mentioned in the paper. Only applied on the train split.\n","    - random_seed: fix seed for reproducibility.\n","    - valid_size: percentage split of the training set used for\n","      the validation set. Should be a float in the range [0, 1].\n","    - shuffle: whether to shuffle the train/validation indices.\n","    - show_sample: plot 9x9 sample grid of the dataset.\n","    - num_workers: number of subprocesses to use when loading the dataset.\n","    - pin_memory: whether to copy tensors into CUDA pinned memory. Set it to\n","      True if using GPU.\n","    Returns\n","    -------\n","    - train_loader: training set iterator.\n","    - valid_loader: validation set iterator.\n","    \"\"\"\n","    error_msg = \"[!] valid_size should be in the range [0, 1].\"\n","    assert ((valid_size >= 0) and (valid_size <= 1)), error_msg\n","\n","    normalize = transforms.Normalize(\n","        mean=[0.4914, 0.4822, 0.4465],\n","        std=[0.2023, 0.1994, 0.2010],\n","    )\n","\n","    # define transforms\n","    valid_transform = transforms.Compose([\n","            transforms.ToTensor(),\n","            normalize,\n","    ])\n","    if augment:\n","        train_transform = transforms.Compose([\n","            transforms.RandomCrop(32, padding=4),\n","            transforms.RandomHorizontalFlip(),\n","            transforms.ToTensor(),\n","            normalize,\n","        ])\n","    else:\n","        train_transform = transforms.Compose([\n","            transforms.ToTensor(),\n","            normalize,\n","        ])\n","\n","    # load the dataset\n","    train_dataset = datasets.CIFAR10(\n","        root=data_dir, train=True,\n","        download=True, transform=train_transform,\n","    )\n","\n","    valid_dataset = datasets.CIFAR10(\n","        root=data_dir, train=True,\n","        download=True, transform=valid_transform,\n","    )\n","\n","    num_train = len(train_dataset)\n","    indices = list(range(num_train))\n","    split = int(np.floor(valid_size * num_train))\n","\n","    if shuffle:\n","        np.random.seed(random_seed)\n","        np.random.shuffle(indices)\n","\n","    train_idx, valid_idx = indices[split:], indices[:split]\n","    train_sampler = SubsetRandomSampler(train_idx)\n","    valid_sampler = SubsetRandomSampler(valid_idx)\n","\n","    train_loader = torch.utils.data.DataLoader(\n","        train_dataset, batch_size=batch_size, sampler=train_sampler,\n","        num_workers=num_workers, pin_memory=pin_memory,\n","    )\n","    valid_loader = torch.utils.data.DataLoader(\n","        valid_dataset, batch_size=batch_size, sampler=valid_sampler,\n","        num_workers=num_workers, pin_memory=pin_memory,\n","    )\n","\n","    # visualize some images\n","    if show_sample:\n","        sample_loader = torch.utils.data.DataLoader(\n","            train_dataset, batch_size=9, shuffle=shuffle,\n","            num_workers=num_workers, pin_memory=pin_memory,\n","        )\n","        data_iter = iter(sample_loader)\n","        images, labels = next(data_iter)\n","        X = images.numpy().transpose([0, 2, 3, 1])\n","        plot_images(X, labels)\n","\n","    return (train_loader, valid_loader)\n","\n","\n","def get_test_loader(data_dir,\n","                    batch_size,\n","                    shuffle=True,\n","                    num_workers=4,\n","                    pin_memory=False):\n","    \"\"\"\n","    Utility function for loading and returning a multi-process\n","    test iterator over the CIFAR-10 dataset.\n","    If using CUDA, num_workers should be set to 1 and pin_memory to True.\n","    Params\n","    ------\n","    - data_dir: path directory to the dataset.\n","    - batch_size: how many samples per batch to load.\n","    - shuffle: whether to shuffle the dataset after every epoch.\n","    - num_workers: number of subprocesses to use when loading the dataset.\n","    - pin_memory: whether to copy tensors into CUDA pinned memory. Set it to\n","      True if using GPU.\n","    Returns\n","    -------\n","    - data_loader: test set iterator.\n","    \"\"\"\n","    normalize = transforms.Normalize(\n","        mean=[0.485, 0.456, 0.406],\n","        std=[0.229, 0.224, 0.225],\n","    )\n","\n","    # define transform\n","    transform = transforms.Compose([\n","        transforms.ToTensor(),\n","        normalize,\n","    ])\n","\n","    dataset = datasets.CIFAR10(\n","        root=data_dir, train=False,\n","        download=True, transform=transform,\n","    )\n","\n","    data_loader = torch.utils.data.DataLoader(\n","        dataset, batch_size=batch_size, shuffle=shuffle,\n","        num_workers=num_workers, pin_memory=pin_memory,\n","    )\n","\n","    return data_loader"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nCE35PtmF53V"},"outputs":[],"source":["import torch\n","import torchvision\n","import torchvision.transforms as transforms\n","\n","transform = transforms.Compose(\n","    [transforms.ToTensor(),\n","     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])\n","\n","\n","#compose normalisations and pipelines\n","# load test set and train set\n","# trainset = torchvision.datasets.CIFAR10(root='./data', train=True,\n","#                                         download=True, transform=transform)\n","# trainloader = torch.utils.data.DataLoader(trainset, batch_size=4,\n","#                                           shuffle=True, num_workers=4)\n","# testset = torchvision.datasets.CIFAR10(root='./data', train=False,\n","#                                        download=True, transform=transform)\n","# testloader = torch.utils.data.DataLoader(testset, batch_size=5,\n","#                                          shuffle=False, num_workers=2)\n","\n","classes = ('plane', 'car', 'bird', 'cat',\n","           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":532,"referenced_widgets":["a20ca32753414294961ff73e256507ac","3299681795e64bd5946596e2810adb49","056fce0828114b978dbc53a24679a9a5","3eda224dcc524412befb767f915f499b","78283ffae43f45029aa6a5315becc1ea","1f7e08c4f177494fbf1e13cf9ba02c96","5617f3e45bee44ecbb38c17f59ae235d","86bac493d19746a8965ae25c03ecce79","91e5dbe8b5e142fe98788e558ff12626","a9348fa9373a48788049e2db3be960ab","3f7f059f25c645348047170ddfae689e"]},"executionInfo":{"elapsed":20937,"status":"ok","timestamp":1678830027994,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":420},"id":"VuQGkdiLMlqV","outputId":"4b77a343-e1b2-46eb-9298-cd48e0de832d"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz to ./data/cifar-10-python.tar.gz\n"]},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"a20ca32753414294961ff73e256507ac","version_major":2,"version_minor":0},"text/plain":["  0%|          | 0/170498071 [00:00<?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["Extracting ./data/cifar-10-python.tar.gz to ./data\n","Files already downloaded and verified\n"]},{"name":"stderr","output_type":"stream","text":["WARNING:matplotlib.image:Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n","WARNING:matplotlib.image:Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n","WARNING:matplotlib.image:Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n","WARNING:matplotlib.image:Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n","WARNING:matplotlib.image:Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n","WARNING:matplotlib.image:Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n","WARNING:matplotlib.image:Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n","WARNING:matplotlib.image:Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n","WARNING:matplotlib.image:Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 9 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["trainloader,validloader = get_train_valid_loader(data_dir='./data',\n","                           batch_size=4,\n","                           augment=False,\n","                           random_seed=0,\n","                           valid_size=0.1,\n","                           shuffle=True,\n","                           show_sample=True,\n","                           num_workers=2,\n","                           pin_memory=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1037,"status":"ok","timestamp":1678830029021,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":420},"id":"GoXQNzgkMpai","outputId":"5cdea7ad-c436-43bb-8200-6aa686f6dc75"},"outputs":[{"name":"stdout","output_type":"stream","text":["Files already downloaded and verified\n"]}],"source":["testloader = get_test_loader(data_dir='./data',\n","                    batch_size=4,\n","                    shuffle=True,\n","                    num_workers=2,\n","                    pin_memory=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Z5y5HSjrV7gO"},"outputs":[],"source":["#cuda utils\n","def get_default_device():\n","    \"\"\"Pick GPU if available, else CPU\"\"\"\n","    if torch.cuda.is_available():\n","        return torch.device('cuda')\n","    else:\n","        return torch.device('cpu')\n","    \n","def to_device(data, device):\n","    \"\"\"Move tensor(s) to chosen device\"\"\"\n","    if isinstance(data, (list,tuple)):\n","        return [to_device(x, device) for x in data]\n","    return data.to(device, non_blocking=True)\n","\n","def save_checkpoint(model,filept,loss_list,lossf):\n","  torch.save(model.state_dict(),filept) #f is something like 'resnet_nest_flood_bpoint15.pt'\n","  with open(lossf, \"w\") as output: #lossf is like \"file_flood_nest.txt\"\n","    output.write(str(loss_list))\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":194},"executionInfo":{"elapsed":1071,"status":"ok","timestamp":1678830030090,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":420},"id":"OJ2npuCWHD0V","outputId":"972cdc7c-80a8-4332-dbb1-bde383a2da49"},"outputs":[{"name":"stderr","output_type":"stream","text":["WARNING:matplotlib.image:Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).\n"]},{"name":"stdout","output_type":"stream","text":["  cat  frog  frog   car\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["import matplotlib.pyplot as plt\n","import numpy as np\n","\n","# functions to show an image\n","\n","\n","def imshow(img):\n","    img = img / 2 + 0.5     # unnormalize\n","    npimg = img.numpy()     # convert to numpy\n","    plt.imshow(np.transpose(npimg, (1, 2, 0)))\n","\n","\n","# get some random training images\n","dataiter = iter(trainloader)\n","images, labels = next(dataiter) #.next()\n","\n","# show images\n","imshow(torchvision.utils.make_grid(images))\n","# print labels\n","print(' '.join('%5s' % classes[labels[j]] for j in range(4))) #lists out the labels as defined in classes list"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4287,"status":"ok","timestamp":1678830034372,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":420},"id":"aiCKFI9SM0so","outputId":"81975460-7931-43b4-8e84-c8eed90ccc26"},"outputs":[{"name":"stdout","output_type":"stream","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: progress in /usr/local/lib/python3.9/dist-packages (1.6)\n"]}],"source":["!pip install progress\n","from progress.bar import IncrementalBar\n","\n","\n","def predict_accuracy(model,trainloader):\n","  bar = IncrementalBar('Countdown', max = len(trainloader))\n","  correct = 0\n","  total = 0\n","  with torch.no_grad(): #no grad so that we don't change the weights\n","    for data in trainloader:\n","      bar.next()\n","      #sleep(1)\n","      images, labels = data\n","      outputs = model(images)\n","      _, predicted = torch.max(outputs.data, 1)\n","      total += labels.size(0)\n","      correct += (predicted == labels).sum().item()\n","    bar.finish()\n","\n","  print('Accuracy of the network on the 12500 training images: %d %%' % (\n","      100 * correct / total))\n","  return (correct,total,correct/total)\n"]},{"cell_type":"markdown","metadata":{"id":"OllvllBZ_OaT"},"source":["# Working with ResNet-18 for CIFAR-10"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":20,"status":"ok","timestamp":1678830034373,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":420},"id":"TuQbkZZ2HLXp","outputId":"18297a9e-3eca-4253-d1f4-ee34a1b99f82"},"outputs":[{"name":"stdout","output_type":"stream","text":["cuda:0\n"]}],"source":["device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","\n","# Assume that we are on a CUDA machine, then this should print a CUDA device:\n","\n","print(device)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yGxrKaIXPVtZ"},"outputs":[],"source":["# predict_accuracy(model,trainloader)"]},{"cell_type":"markdown","metadata":{"id":"p-3e5OEvZO6t"},"source":["#1. Set up AMP"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1678829417054,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":420},"id":"uEbQeD-jkbZt","outputId":"b2e29054-e033-4819-be6b-db1c337d2507"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content\n"]}],"source":["!pwd"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":18,"status":"ok","timestamp":1678830034373,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":420},"id":"-E7vsdhbZSD6","outputId":"5d01abf4-b86a-4fbd-8ce3-339cb1582a42"},"outputs":[{"name":"stdout","output_type":"stream","text":["Cloning into 'AMP-Regularizer'...\n","remote: Enumerating objects: 90, done.\u001b[K\n","remote: Counting objects: 100% (90/90), done.\u001b[K\n","remote: Compressing objects: 100% (62/62), done.\u001b[K\n","remote: Total 90 (delta 45), reused 71 (delta 26), pack-reused 0\u001b[K\n","Unpacking objects: 100% (90/90), 82.50 KiB | 2.95 MiB/s, done.\n"]}],"source":["!git clone https://github.com/hiyouga/AMP-Regularizer.git\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":14,"status":"ok","timestamp":1678830034374,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":420},"id":"hMSrD6LlazKR","outputId":"9f4a506d-16c1-4d5d-f9e4-481b8bbd2b6b"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content/AMP-Regularizer/AMP-Regularizer\n"]}],"source":["%cd AMP-Regularizer/"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"czYw6cHHZZmD"},"outputs":[],"source":["from amp import AMP\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DHn6UzX1_eZ4"},"outputs":[],"source":["import torch.optim as optim\n","\n","criterion = nn.CrossEntropyLoss()\n","#optimizer = optim.SGD(model.parameters(), nesterov=True, momentum=0.9,lr=0.001)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1678589315578,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"rmWVo8aVpU2b","outputId":"1ff13cbc-7944-461d-cb48-25310ec802ec"},"outputs":[{"data":{"text/plain":["AMP (\n","Parameter Group 0\n","    dampening: 0\n","    differentiable: False\n","    epsilon: 0.5\n","    foreach: None\n","    inner_iter: 1\n","    inner_lr: 1\n","    lr: 0.01\n","    maximize: False\n","    momentum: 0.9\n","    nesterov: False\n","    weight_decay: 0\n",")"]},"execution_count":31,"metadata":{},"output_type":"execute_result"}],"source":["\n","optimizer\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":667,"status":"ok","timestamp":1678830035029,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":420},"id":"7EoKdQnQ6PrJ","outputId":"1ad93378-3a7f-454a-f2c1-dfbd58c53364"},"outputs":[{"name":"stderr","output_type":"stream","text":["Using cache found in /root/.cache/torch/hub/chenyaofo_pytorch-cifar-models_master\n"]}],"source":["#model = torch.hub.load('pytorch/vision:v0.10.0', 'wide_resnet50_2', pretrained=False)\n","model = torch.hub.load(\"chenyaofo/pytorch-cifar-models\", \"cifar10_resnet20\", pretrained=False, trust_repo=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"njInrfXM_eXm","outputId":"0dc0d4c5-fce1-4f58-c0aa-7af27b87c13d"},"outputs":[{"name":"stdout","output_type":"stream","text":["[1,   200] loss: 2.461\n","[1,   400] loss: 2.334\n","[1,   600] loss: 2.307\n","[1,   800] loss: 2.338\n","[1,  1000] loss: 2.304\n","[1,  1200] loss: 2.311\n","[1,  1400] loss: 2.282\n","[1,  1600] loss: 2.245\n","[1,  1800] loss: 2.257\n","[1,  2000] loss: 2.250\n","[1,  2200] loss: 2.209\n","[1,  2400] loss: 2.238\n","[1,  2600] loss: 2.229\n","[1,  2800] loss: 2.210\n","[1,  3000] loss: 2.217\n","[1,  3200] loss: 2.197\n","[1,  3400] loss: 2.153\n","[1,  3600] loss: 2.200\n","[1,  3800] loss: 2.174\n","[1,  4000] loss: 2.170\n","[1,  4200] loss: 2.184\n","[1,  4400] loss: 2.181\n","[1,  4600] loss: 2.137\n","[1,  4800] loss: 2.135\n","[1,  5000] loss: 2.150\n","[1,  5200] loss: 2.123\n","[1,  5400] loss: 2.139\n","[1,  5600] loss: 2.093\n","[1,  5800] loss: 2.104\n","[1,  6000] loss: 2.162\n","[1,  6200] loss: 2.085\n","[1,  6400] loss: 2.040\n","[1,  6600] loss: 2.077\n","[1,  6800] loss: 2.055\n","[1,  7000] loss: 2.093\n","[1,  7200] loss: 2.092\n","[1,  7400] loss: 2.055\n","[1,  7600] loss: 2.038\n","[1,  7800] loss: 2.029\n","[1,  8000] loss: 2.014\n","[1,  8200] loss: 2.012\n","[1,  8400] loss: 1.947\n","[1,  8600] loss: 2.032\n","[1,  8800] loss: 2.014\n","[1,  9000] loss: 1.976\n","[1,  9200] loss: 2.003\n","[1,  9400] loss: 1.949\n","[1,  9600] loss: 1.970\n","[1,  9800] loss: 1.940\n","[1, 10000] loss: 1.941\n","[1, 10200] loss: 1.969\n","[1, 10400] loss: 1.962\n","[1, 10600] loss: 1.956\n","[1, 10800] loss: 1.934\n","[1, 11000] loss: 1.906\n","[1, 11200] loss: 1.904\n","Accuracy of the network on the 12500 training images: 28 %\n","Accuracy of the network on the 12500 training images: 28 %\n","(Epoch 1 / 10) train acc: 0.286756; val_acc: 0.285800\n","[2,   200] loss: 1.916\n","[2,   400] loss: 1.891\n","[2,   600] loss: 1.907\n","[2,   800] loss: 1.899\n","[2,  1000] loss: 1.878\n","[2,  1200] loss: 1.845\n","[2,  1400] loss: 1.876\n","[2,  1600] loss: 1.859\n","[2,  1800] loss: 1.837\n","[2,  2000] loss: 1.818\n","[2,  2200] loss: 1.770\n","[2,  2400] loss: 1.848\n","[2,  2600] loss: 1.806\n","[2,  2800] loss: 1.829\n","[2,  3000] loss: 1.818\n","[2,  3200] loss: 1.826\n","[2,  3400] loss: 1.818\n","[2,  3600] loss: 1.767\n","[2,  3800] loss: 1.765\n","[2,  4000] loss: 1.817\n","[2,  4200] loss: 1.798\n","[2,  4400] loss: 1.803\n","[2,  4600] loss: 1.745\n","[2,  4800] loss: 1.728\n","[2,  5000] loss: 1.831\n","[2,  5200] loss: 1.754\n","[2,  5400] loss: 1.761\n","[2,  5600] loss: 1.822\n","[2,  5800] loss: 1.721\n","[2,  6000] loss: 1.767\n","[2,  6200] loss: 1.746\n","[2,  6400] loss: 1.737\n","[2,  6600] loss: 1.732\n","[2,  6800] loss: 1.710\n","[2,  7000] loss: 1.718\n","[2,  7200] loss: 1.710\n","[2,  7400] loss: 1.758\n","[2,  7600] loss: 1.745\n","[2,  7800] loss: 1.789\n","[2,  8000] loss: 1.724\n","[2,  8200] loss: 1.716\n","[2,  8400] loss: 1.678\n","[2,  8600] loss: 1.696\n","[2,  8800] loss: 1.684\n","[2,  9000] loss: 1.699\n","[2,  9200] loss: 1.664\n","[2,  9400] loss: 1.700\n","[2,  9600] loss: 1.659\n","[2,  9800] loss: 1.678\n","[2, 10000] loss: 1.624\n","[2, 10200] loss: 1.619\n","[2, 10400] loss: 1.684\n","[2, 10600] loss: 1.625\n","[2, 10800] loss: 1.629\n","[2, 11000] loss: 1.677\n","[2, 11200] loss: 1.652\n","Accuracy of the network on the 12500 training images: 37 %\n","Accuracy of the network on the 12500 training images: 36 %\n","(Epoch 2 / 10) train acc: 0.373178; val_acc: 0.362000\n","[3,   200] loss: 1.638\n","[3,   400] loss: 1.628\n","[3,   600] loss: 1.618\n","[3,   800] loss: 1.611\n","[3,  1000] loss: 1.591\n","[3,  1200] loss: 1.604\n","[3,  1400] loss: 1.600\n","[3,  1600] loss: 1.559\n","[3,  1800] loss: 1.530\n","[3,  2000] loss: 1.589\n","[3,  2200] loss: 1.542\n","[3,  2400] loss: 1.620\n","[3,  2600] loss: 1.525\n","[3,  2800] loss: 1.566\n","[3,  3000] loss: 1.538\n","[3,  3200] loss: 1.565\n","[3,  3400] loss: 1.587\n","[3,  3600] loss: 1.531\n","[3,  3800] loss: 1.552\n","[3,  4000] loss: 1.525\n","[3,  4200] loss: 1.560\n","[3,  4400] loss: 1.502\n","[3,  4600] loss: 1.546\n","[3,  4800] loss: 1.525\n","[3,  5000] loss: 1.481\n","[3,  5200] loss: 1.523\n","[3,  5400] loss: 1.493\n","[3,  5600] loss: 1.515\n","[3,  5800] loss: 1.503\n","[3,  6000] loss: 1.512\n","[3,  6200] loss: 1.445\n","[3,  6400] loss: 1.495\n","[3,  6600] loss: 1.422\n","[3,  6800] loss: 1.502\n","[3,  7000] loss: 1.460\n","[3,  7200] loss: 1.479\n","[3,  7400] loss: 1.472\n","[3,  7600] loss: 1.477\n","[3,  7800] loss: 1.453\n","[3,  8000] loss: 1.458\n","[3,  8200] loss: 1.448\n","[3,  8400] loss: 1.432\n","[3,  8600] loss: 1.515\n","[3,  8800] loss: 1.476\n","[3,  9000] loss: 1.390\n","[3,  9200] loss: 1.465\n","[3,  9400] loss: 1.347\n","[3,  9600] loss: 1.370\n","[3,  9800] loss: 1.426\n","[3, 10000] loss: 1.393\n","[3, 10200] loss: 1.426\n","[3, 10400] loss: 1.371\n","[3, 10600] loss: 1.403\n","[3, 10800] loss: 1.435\n","[3, 11000] loss: 1.380\n","[3, 11200] loss: 1.346\n","Accuracy of the network on the 12500 training images: 48 %\n","Accuracy of the network on the 12500 training images: 48 %\n","(Epoch 3 / 10) train acc: 0.484133; val_acc: 0.482200\n","[4,   200] loss: 1.450\n","[4,   400] loss: 1.416\n","[4,   600] loss: 1.377\n","[4,   800] loss: 1.361\n","[4,  1000] loss: 1.367\n","[4,  1200] loss: 1.404\n","[4,  1400] loss: 1.391\n","[4,  1600] loss: 1.328\n","[4,  1800] loss: 1.409\n","[4,  2000] loss: 1.374\n","[4,  2200] loss: 1.289\n","[4,  2400] loss: 1.274\n","[4,  2600] loss: 1.347\n","[4,  2800] loss: 1.319\n","[4,  3000] loss: 1.390\n","[4,  3200] loss: 1.355\n","[4,  3400] loss: 1.312\n","[4,  3600] loss: 1.342\n","[4,  3800] loss: 1.328\n","[4,  4000] loss: 1.323\n","[4,  4200] loss: 1.252\n","[4,  4400] loss: 1.334\n","[4,  4600] loss: 1.290\n","[4,  4800] loss: 1.375\n","[4,  5000] loss: 1.298\n","[4,  5200] loss: 1.285\n","[4,  5400] loss: 1.333\n","[4,  5600] loss: 1.259\n","[4,  5800] loss: 1.301\n","[4,  6000] loss: 1.382\n","[4,  6200] loss: 1.343\n","[4,  6400] loss: 1.311\n","[4,  6600] loss: 1.255\n","[4,  6800] loss: 1.299\n","[4,  7000] loss: 1.345\n","[4,  7200] loss: 1.273\n","[4,  7400] loss: 1.281\n","[4,  7600] loss: 1.310\n","[4,  7800] loss: 1.285\n","[4,  8000] loss: 1.277\n","[4,  8200] loss: 1.278\n","[4,  8400] loss: 1.286\n","[4,  8600] loss: 1.282\n","[4,  8800] loss: 1.324\n","[4,  9000] loss: 1.316\n","[4,  9200] loss: 1.201\n","[4,  9400] loss: 1.222\n","[4,  9600] loss: 1.231\n","[4,  9800] loss: 1.257\n","[4, 10000] loss: 1.310\n","[4, 10200] loss: 1.272\n","[4, 10400] loss: 1.243\n","[4, 10600] loss: 1.204\n","[4, 10800] loss: 1.290\n","[4, 11000] loss: 1.247\n","[4, 11200] loss: 1.254\n","Accuracy of the network on the 12500 training images: 58 %\n","Accuracy of the network on the 12500 training images: 58 %\n","(Epoch 4 / 10) train acc: 0.586400; val_acc: 0.583000\n","[5,   200] loss: 1.222\n","[5,   400] loss: 1.240\n","[5,   600] loss: 1.210\n","[5,   800] loss: 1.254\n","[5,  1000] loss: 1.212\n","[5,  1200] loss: 1.227\n","[5,  1400] loss: 1.253\n","[5,  1600] loss: 1.284\n","[5,  1800] loss: 1.201\n","[5,  2000] loss: 1.171\n","[5,  2200] loss: 1.330\n","[5,  2400] loss: 1.216\n","[5,  2600] loss: 1.213\n","[5,  2800] loss: 1.198\n","[5,  3000] loss: 1.196\n","[5,  3200] loss: 1.253\n","[5,  3400] loss: 1.220\n","[5,  3600] loss: 1.181\n","[5,  3800] loss: 1.200\n","[5,  4000] loss: 1.173\n","[5,  4200] loss: 1.269\n","[5,  4400] loss: 1.246\n","[5,  4600] loss: 1.232\n","[5,  4800] loss: 1.149\n","[5,  5000] loss: 1.174\n","[5,  5200] loss: 1.212\n","[5,  5400] loss: 1.226\n","[5,  5600] loss: 1.200\n","[5,  5800] loss: 1.139\n","[5,  6000] loss: 1.203\n","[5,  6200] loss: 1.237\n","[5,  6400] loss: 1.195\n","[5,  6600] loss: 1.218\n","[5,  6800] loss: 1.200\n","[5,  7000] loss: 1.196\n","[5,  7200] loss: 1.179\n","[5,  7400] loss: 1.190\n","[5,  7600] loss: 1.081\n","[5,  7800] loss: 1.201\n","[5,  8000] loss: 1.187\n","[5,  8200] loss: 1.179\n","[5,  8400] loss: 1.213\n","[5,  8600] loss: 1.200\n","[5,  8800] loss: 1.141\n","[5,  9000] loss: 1.241\n","[5,  9200] loss: 1.164\n","[5,  9400] loss: 1.179\n","[5,  9600] loss: 1.170\n","[5,  9800] loss: 1.123\n","[5, 10000] loss: 1.090\n","[5, 10200] loss: 1.097\n","[5, 10400] loss: 1.190\n","[5, 10600] loss: 1.163\n","[5, 10800] loss: 1.210\n","[5, 11000] loss: 1.119\n","[5, 11200] loss: 1.175\n","Accuracy of the network on the 12500 training images: 59 %\n","Accuracy of the network on the 12500 training images: 58 %\n","(Epoch 5 / 10) train acc: 0.595222; val_acc: 0.580600\n","[6,   200] loss: 1.104\n","[6,   400] loss: 1.104\n","[6,   600] loss: 1.165\n","[6,   800] loss: 1.164\n","[6,  1000] loss: 1.079\n","[6,  1200] loss: 1.126\n","[6,  1400] loss: 1.170\n","[6,  1600] loss: 1.084\n","[6,  1800] loss: 1.184\n","[6,  2000] loss: 1.094\n","[6,  2200] loss: 1.092\n","[6,  2400] loss: 1.126\n","[6,  2600] loss: 1.048\n","[6,  2800] loss: 1.143\n","[6,  3000] loss: 1.080\n","[6,  3200] loss: 1.060\n","[6,  3400] loss: 1.120\n","[6,  3600] loss: 1.203\n","[6,  3800] loss: 1.100\n","[6,  4000] loss: 1.102\n","[6,  4200] loss: 1.156\n","[6,  4400] loss: 1.144\n","[6,  4600] loss: 1.115\n","[6,  4800] loss: 1.127\n","[6,  5000] loss: 1.111\n","[6,  5200] loss: 1.075\n","[6,  5400] loss: 1.159\n","[6,  5600] loss: 1.141\n","[6,  5800] loss: 1.159\n","[6,  6000] loss: 1.093\n","[6,  6200] loss: 1.130\n","[6,  6400] loss: 1.115\n","[6,  6600] loss: 1.152\n","[6,  6800] loss: 1.133\n","[6,  7000] loss: 1.095\n","[6,  7200] loss: 1.053\n","[6,  7400] loss: 1.061\n","[6,  7600] loss: 1.034\n","[6,  7800] loss: 1.091\n","[6,  8000] loss: 1.076\n","[6,  8200] loss: 1.061\n","[6,  8400] loss: 1.132\n","[6,  8600] loss: 1.099\n","[6,  8800] loss: 1.024\n","[6,  9000] loss: 1.109\n","[6,  9200] loss: 1.176\n","[6,  9400] loss: 1.128\n","[6,  9600] loss: 1.085\n","[6,  9800] loss: 1.156\n","[6, 10000] loss: 1.127\n","[6, 10200] loss: 1.128\n","[6, 10400] loss: 1.107\n","[6, 10600] loss: 1.099\n","[6, 10800] loss: 1.124\n","[6, 11000] loss: 1.043\n","[6, 11200] loss: 1.123\n","Accuracy of the network on the 12500 training images: 64 %\n","Accuracy of the network on the 12500 training images: 64 %\n","(Epoch 6 / 10) train acc: 0.641956; val_acc: 0.640800\n","[7,   200] loss: 1.079\n","[7,   400] loss: 1.008\n","[7,   600] loss: 1.060\n","[7,   800] loss: 1.080\n","[7,  1000] loss: 1.135\n","[7,  1200] loss: 1.109\n","[7,  1400] loss: 1.126\n","[7,  1600] loss: 1.067\n","[7,  1800] loss: 1.085\n","[7,  2000] loss: 0.997\n","[7,  2200] loss: 1.094\n","[7,  2400] loss: 1.044\n","[7,  2600] loss: 1.069\n","[7,  2800] loss: 1.076\n","[7,  3000] loss: 1.066\n","[7,  3200] loss: 1.140\n","[7,  3400] loss: 1.061\n","[7,  3600] loss: 1.110\n","[7,  3800] loss: 1.069\n","[7,  4000] loss: 1.090\n","[7,  4200] loss: 1.097\n","[7,  4400] loss: 1.052\n","[7,  4600] loss: 1.057\n","[7,  4800] loss: 1.069\n","[7,  5000] loss: 1.029\n","[7,  5200] loss: 1.047\n","[7,  5400] loss: 1.083\n","[7,  5600] loss: 1.057\n","[7,  5800] loss: 1.041\n","[7,  6000] loss: 1.046\n","[7,  6200] loss: 1.101\n","[7,  6400] loss: 1.022\n","[7,  6600] loss: 1.045\n","[7,  6800] loss: 1.082\n","[7,  7000] loss: 1.059\n","[7,  7200] loss: 0.988\n","[7,  7400] loss: 1.020\n","[7,  7600] loss: 1.039\n","[7,  7800] loss: 1.082\n","[7,  8000] loss: 1.073\n","[7,  8200] loss: 1.035\n","[7,  8400] loss: 1.001\n","[7,  8600] loss: 1.039\n","[7,  8800] loss: 1.080\n","[7,  9000] loss: 1.051\n","[7,  9200] loss: 1.018\n","[7,  9400] loss: 1.039\n","[7,  9600] loss: 1.033\n","[7,  9800] loss: 1.084\n","[7, 10000] loss: 0.977\n","[7, 10200] loss: 1.032\n","[7, 10400] loss: 1.043\n","[7, 10600] loss: 1.022\n","[7, 10800] loss: 1.046\n","[7, 11000] loss: 1.024\n","[7, 11200] loss: 0.996\n","Accuracy of the network on the 12500 training images: 63 %\n","Accuracy of the network on the 12500 training images: 63 %\n","(Epoch 7 / 10) train acc: 0.639644; val_acc: 0.631400\n","[8,   200] loss: 1.012\n","[8,   400] loss: 1.121\n","[8,   600] loss: 0.986\n","[8,   800] loss: 1.049\n","[8,  1000] loss: 0.973\n","[8,  1200] loss: 1.042\n","[8,  1400] loss: 1.016\n","[8,  1600] loss: 0.979\n","[8,  1800] loss: 1.046\n","[8,  2000] loss: 1.008\n","[8,  2200] loss: 0.981\n","[8,  2400] loss: 0.955\n","[8,  2600] loss: 1.034\n","[8,  2800] loss: 1.004\n","[8,  3000] loss: 1.059\n","[8,  3200] loss: 1.001\n","[8,  3400] loss: 1.024\n","[8,  3600] loss: 1.046\n","[8,  3800] loss: 0.984\n","[8,  4000] loss: 1.005\n","[8,  4200] loss: 1.070\n","[8,  4400] loss: 0.975\n","[8,  4600] loss: 1.003\n","[8,  4800] loss: 1.011\n","[8,  5000] loss: 1.036\n","[8,  5200] loss: 0.990\n","[8,  5400] loss: 1.008\n","[8,  5600] loss: 1.035\n","[8,  5800] loss: 0.976\n","[8,  6000] loss: 1.112\n","[8,  6200] loss: 0.951\n","[8,  6400] loss: 1.016\n","[8,  6600] loss: 1.043\n","[8,  6800] loss: 1.042\n","[8,  7000] loss: 1.005\n","[8,  7200] loss: 1.038\n","[8,  7400] loss: 1.083\n","[8,  7600] loss: 1.036\n","[8,  7800] loss: 1.048\n","[8,  8000] loss: 1.100\n","[8,  8200] loss: 1.002\n","[8,  8400] loss: 0.978\n","[8,  8600] loss: 0.918\n","[8,  8800] loss: 0.990\n","[8,  9000] loss: 1.040\n","[8,  9200] loss: 0.964\n","[8,  9400] loss: 1.058\n","[8,  9600] loss: 0.971\n","[8,  9800] loss: 1.054\n","[8, 10000] loss: 0.986\n","[8, 10200] loss: 1.067\n","[8, 10400] loss: 0.972\n","[8, 10600] loss: 1.003\n","[8, 10800] loss: 1.032\n","[8, 11000] loss: 0.980\n","[8, 11200] loss: 1.054\n","Accuracy of the network on the 12500 training images: 70 %\n","Accuracy of the network on the 12500 training images: 70 %\n","(Epoch 8 / 10) train acc: 0.703400; val_acc: 0.702200\n","[9,   200] loss: 0.973\n","[9,   400] loss: 0.968\n","[9,   600] loss: 0.947\n","[9,   800] loss: 1.012\n","[9,  1000] loss: 0.952\n","[9,  1200] loss: 0.965\n","[9,  1400] loss: 0.942\n","[9,  1600] loss: 0.980\n","[9,  1800] loss: 0.982\n","[9,  2000] loss: 0.913\n","[9,  2200] loss: 1.053\n","[9,  2400] loss: 0.964\n","[9,  2600] loss: 0.996\n","[9,  2800] loss: 1.001\n","[9,  3000] loss: 0.973\n","[9,  3200] loss: 0.956\n","[9,  3400] loss: 0.969\n","[9,  3600] loss: 1.035\n","[9,  3800] loss: 0.972\n","[9,  4000] loss: 1.010\n","[9,  4200] loss: 1.026\n","[9,  4400] loss: 0.996\n","[9,  4600] loss: 1.020\n","[9,  4800] loss: 0.994\n","[9,  5000] loss: 0.970\n","[9,  5200] loss: 1.000\n","[9,  5400] loss: 0.959\n","[9,  5600] loss: 1.069\n","[9,  5800] loss: 0.964\n","[9,  6000] loss: 1.064\n","[9,  6200] loss: 0.985\n","[9,  6400] loss: 0.953\n","[9,  6600] loss: 0.989\n","[9,  6800] loss: 0.980\n","[9,  7000] loss: 0.912\n","[9,  7200] loss: 0.965\n","[9,  7400] loss: 0.959\n","[9,  7600] loss: 0.930\n","[9,  7800] loss: 0.962\n","[9,  8000] loss: 0.944\n","[9,  8200] loss: 0.972\n","[9,  8400] loss: 0.960\n","[9,  8600] loss: 0.962\n","[9,  8800] loss: 1.011\n","[9,  9000] loss: 1.001\n","[9,  9200] loss: 0.935\n","[9,  9400] loss: 0.976\n","[9,  9600] loss: 1.068\n","[9,  9800] loss: 0.965\n","[9, 10000] loss: 0.929\n","[9, 10200] loss: 0.974\n","[9, 10400] loss: 0.959\n","[9, 10600] loss: 0.942\n","[9, 10800] loss: 1.013\n","[9, 11000] loss: 0.994\n","[9, 11200] loss: 0.977\n","Accuracy of the network on the 12500 training images: 67 %\n","Accuracy of the network on the 12500 training images: 66 %\n","(Epoch 9 / 10) train acc: 0.671422; val_acc: 0.664200\n","[10,   200] loss: 0.908\n","[10,   400] loss: 0.939\n","[10,   600] loss: 0.991\n","[10,   800] loss: 0.985\n","[10,  1000] loss: 0.949\n","[10,  1200] loss: 0.935\n","[10,  1400] loss: 1.013\n","[10,  1600] loss: 1.007\n","[10,  1800] loss: 1.009\n","[10,  2000] loss: 1.035\n","[10,  2200] loss: 1.037\n","[10,  2400] loss: 0.987\n","[10,  2600] loss: 0.934\n","[10,  2800] loss: 0.873\n","[10,  3000] loss: 0.937\n","[10,  3200] loss: 0.952\n","[10,  3400] loss: 0.938\n","[10,  3600] loss: 1.001\n","[10,  3800] loss: 1.009\n","[10,  4000] loss: 0.937\n","[10,  4200] loss: 0.961\n","[10,  4400] loss: 0.953\n","[10,  4600] loss: 1.016\n","[10,  4800] loss: 0.996\n","[10,  5000] loss: 0.938\n","[10,  5200] loss: 0.882\n","[10,  5400] loss: 0.873\n","[10,  5600] loss: 1.036\n","[10,  5800] loss: 0.921\n","[10,  6000] loss: 0.990\n","[10,  6200] loss: 0.937\n","[10,  6400] loss: 0.989\n","[10,  6600] loss: 0.979\n","[10,  6800] loss: 0.952\n","[10,  7000] loss: 0.939\n","[10,  7200] loss: 0.979\n","[10,  7400] loss: 0.941\n","[10,  7600] loss: 0.961\n","[10,  7800] loss: 0.912\n","[10,  8000] loss: 0.980\n","[10,  8200] loss: 0.963\n","[10,  8400] loss: 0.920\n","[10,  8600] loss: 0.896\n","[10,  8800] loss: 0.930\n","[10,  9000] loss: 1.014\n","[10,  9200] loss: 0.976\n","[10,  9400] loss: 0.962\n","[10,  9600] loss: 0.926\n","[10,  9800] loss: 0.922\n","[10, 10000] loss: 1.016\n","[10, 10200] loss: 0.999\n","[10, 10400] loss: 0.940\n","[10, 10600] loss: 0.888\n","[10, 10800] loss: 0.927\n","[10, 11000] loss: 0.977\n","[10, 11200] loss: 0.933\n","Accuracy of the network on the 12500 training images: 71 %\n","Accuracy of the network on the 12500 training images: 70 %\n","(Epoch 10 / 10) train acc: 0.711422; val_acc: 0.707600\n","Finished Training\n"]}],"source":["loss_values = []\n","accuracies = []\n","best_val_acc = 0\n","val_accuracy = []\n","\n","\n","\n","optimizer = AMP(params=filter(lambda p: p.requires_grad, model.parameters()),\n","                        lr=0.1,\n","                        epsilon=0.1,\n","                        inner_lr=0.1,\n","                        inner_iter=10,\n","                        base_optimizer=torch.optim.SGD,\n","                        momentum=0.9,\n","                        weight_decay=1e-4,\n","                        nesterov=True)\n","\n","for epoch in range(10):  # loop over the dataset multiple times\n","  total =0\n","  correct = 0\n","\n","  running_loss = 0.0\n","\n","  for i, data in enumerate(trainloader, 0):\n","\n","    inputs, labels = data\n","\n","    def closure():\n","      optimizer.zero_grad()\n","      outputs = model(inputs)\n","      loss = criterion(outputs, labels)\n","      loss.backward()\n","      #torch.nn.utils.clip_grad_norm_(model.parameters(),max_norm=0.5)\n","      return outputs, loss\n","\n","    outputs, loss = optimizer.step(closure)\n","\n","\n","      # print statistics\n","    running_loss += loss.item()\n","    loss_values.append(loss.item())\n","    if i % 200 == 199:    # print every 2000 mini-batches\n","        print('[%d, %5d] loss: %.3f' %\n","              (epoch + 1, i + 1, running_loss / 200))\n","        running_loss = 0.0\n","  #caculate accuracy\n","  train_correct,train_total,train_acc = predict_accuracy(model,trainloader)\n","  ## calculate validation accuracy\n","  val_correct,val_total,val_acc = predict_accuracy(model,validloader)\n","  accuracies.append(train_acc)\n","  val_accuracy.append(val_acc)\n","\n","  print('(Epoch %d / %d) train acc: %f; val_acc: %f' % (epoch+1, 10, train_acc, val_acc))\n","\n","  #retain best parameters\n","  if val_acc > best_val_acc:\n","    best_val_acc = val_acc\n","    best_params = model.state_dict()\n","\n","print('Finished Training')"]},{"cell_type":"markdown","metadata":{"id":"iQ0Om8EtcqMy"},"source":["# SGD with momentum and nesterov"]},{"cell_type":"code","source":["loss_values"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":169},"id":"GkW6swUt5mDz","executionInfo":{"status":"error","timestamp":1678860783357,"user_tz":420,"elapsed":5,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"}},"outputId":"dcbb0db7-3d28-4341-a364-460ecf76f9d8"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-67e725e72358>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mloss_values\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'loss_values' is not defined"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":961},"executionInfo":{"elapsed":2508573,"status":"error","timestamp":1678833415840,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":420},"id":"19n0R-OYBY7C","outputId":"d2f8a572-f63b-4b5e-bd79-41faa5b0d57e"},"outputs":[{"name":"stdout","output_type":"stream","text":["[1,   200] loss: 2.320\n","[1,   400] loss: 2.311\n","[1,   600] loss: 2.227\n","[1,   800] loss: 2.272\n","[1,  1000] loss: 2.205\n","[1,  1200] loss: 2.215\n","[1,  1400] loss: 2.229\n","[1,  1600] loss: 2.169\n","[1,  1800] loss: 2.187\n","[1,  2000] loss: 2.281\n","[1,  2200] loss: 2.226\n","[1,  2400] loss: 2.178\n","[1,  2600] loss: 2.186\n","[1,  2800] loss: 2.178\n","[1,  3000] loss: 2.156\n","[1,  3200] loss: 2.219\n","[1,  3400] loss: 2.162\n","[1,  3600] loss: 2.196\n","[1,  3800] loss: 2.205\n","[1,  4000] loss: 2.170\n","[1,  4200] loss: 2.175\n","[1,  4400] loss: 2.129\n","[1,  4600] loss: 2.130\n","[1,  4800] loss: 2.147\n","[1,  5000] loss: 2.121\n","[1,  5200] loss: 2.085\n","[1,  5400] loss: 2.143\n","[1,  5600] loss: 2.062\n","[1,  5800] loss: 2.079\n","[1,  6000] loss: 2.039\n","[1,  6200] loss: 2.085\n","[1,  6400] loss: 2.032\n"]},{"ename":"KeyboardInterrupt","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-44-a22ca61002a5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     34\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0moutputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloss\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     35\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 36\u001b[0;31m     \u001b[0moutputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0moptimizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mclosure\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     37\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     38\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/torch/optim/optimizer.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    138\u001b[0m                 \u001b[0mprofile_name\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"Optimizer.step#{}.step\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__class__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    139\u001b[0m                 \u001b[0;32mwith\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mautograd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprofiler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecord_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprofile_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 140\u001b[0;31m                     \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    141\u001b[0m                     \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_optimizer_step_code\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    142\u001b[0m                     \u001b[0;32mreturn\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/torch/autograd/grad_mode.py\u001b[0m in \u001b[0;36mdecorate_context\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     25\u001b[0m         \u001b[0;32mdef\u001b[0m \u001b[0mdecorate_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclone\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 27\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     28\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mcast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mF\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdecorate_context\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/content/AMP-Regularizer/amp.py\u001b[0m in \u001b[0;36mstep\u001b[0;34m(self, closure)\u001b[0m\n\u001b[1;32m     57\u001b[0m                         \u001b[0mp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msub_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mp\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'dev'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdev\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# update \"theta\" with \"theta+delta\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     58\u001b[0m                         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mp\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'dev'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdev\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 59\u001b[0;31m             \u001b[0mclosure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     60\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mgroup\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparam_groups\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     61\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mp\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mgroup\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'params'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/torch/autograd/grad_mode.py\u001b[0m in \u001b[0;36mdecorate_context\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     25\u001b[0m         \u001b[0;32mdef\u001b[0m \u001b[0mdecorate_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclone\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 27\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     28\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mcast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mF\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdecorate_context\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-44-a22ca61002a5>\u001b[0m in \u001b[0;36mclosure\u001b[0;34m()\u001b[0m\n\u001b[1;32m     28\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclosure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m       \u001b[0moptimizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzero_grad\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 30\u001b[0;31m       \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     31\u001b[0m       \u001b[0mloss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcriterion\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     32\u001b[0m       \u001b[0mloss\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m   1192\u001b[0m         if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks\n\u001b[1;32m   1193\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1194\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1195\u001b[0m         \u001b[0;31m# Do not call functions when jit is used\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1196\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m~/.cache/torch/hub/chenyaofo_pytorch-cifar-models_master/pytorch_cifar_models/resnet.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m    144\u001b[0m         \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrelu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    145\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 146\u001b[0;31m         \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayer1\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    147\u001b[0m         \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayer2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    148\u001b[0m         \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayer3\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m   1192\u001b[0m         if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks\n\u001b[1;32m   1193\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1194\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1195\u001b[0m         \u001b[0;31m# Do not call functions when jit is used\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1196\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/torch/nn/modules/container.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    202\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    203\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mmodule\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 204\u001b[0;31m             \u001b[0minput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodule\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    205\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    206\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m   1192\u001b[0m         if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks\n\u001b[1;32m   1193\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1194\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1195\u001b[0m         \u001b[0;31m# Do not call functions when jit is used\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1196\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m~/.cache/torch/hub/chenyaofo_pytorch-cifar-models_master/pytorch_cifar_models/resnet.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m     88\u001b[0m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrelu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     89\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 90\u001b[0;31m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconv2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     91\u001b[0m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbn2\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     92\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *input, **kwargs)\u001b[0m\n\u001b[1;32m   1192\u001b[0m         if not (self._backward_hooks or self._forward_hooks or self._forward_pre_hooks or _global_backward_hooks\n\u001b[1;32m   1193\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1194\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1195\u001b[0m         \u001b[0;31m# Do not call functions when jit is used\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1196\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/torch/nn/modules/conv.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    461\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    462\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 463\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_conv_forward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mweight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbias\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    464\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    465\u001b[0m \u001b[0;32mclass\u001b[0m \u001b[0mConv3d\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_ConvNd\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/torch/nn/modules/conv.py\u001b[0m in \u001b[0;36m_conv_forward\u001b[0;34m(self, input, weight, bias)\u001b[0m\n\u001b[1;32m    457\u001b[0m                             \u001b[0mweight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbias\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstride\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    458\u001b[0m                             _pair(0), self.dilation, self.groups)\n\u001b[0;32m--> 459\u001b[0;31m         return F.conv2d(input, weight, bias, self.stride,\n\u001b[0m\u001b[1;32m    460\u001b[0m                         self.padding, self.dilation, self.groups)\n\u001b[1;32m    461\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["loss_values = []\n","accuracies = []\n","best_val_acc = 0\n","val_accuracy = []\n","\n","\n","\n","optimizer = AMP(params=filter(lambda p: p.requires_grad, model.parameters()),\n","                        lr=0.2, #changing this from 0.1\n","                        epsilon=0.1,\n","                        inner_lr=0.1,\n","                        inner_iter=10,\n","                        base_optimizer=torch.optim.SGD,\n","                        momentum=0.9,\n","                        weight_decay=1e-4,\n","                        nesterov=True)\n","\n","for epoch in range(10):  # loop over the dataset multiple times\n","  total =0\n","  correct = 0\n","\n","  running_loss = 0.0\n","\n","  for i, data in enumerate(trainloader, 0):\n","\n","    inputs, labels = data\n","\n","    def closure():\n","      optimizer.zero_grad()\n","      outputs = model(inputs)\n","      loss = criterion(outputs, labels)\n","      loss.backward()\n","      #torch.nn.utils.clip_grad_norm_(model.parameters(),max_norm=0.5)\n","      return outputs, loss\n","\n","    outputs, loss = optimizer.step(closure)\n","\n","\n","      # print statistics\n","    running_loss += loss.item()\n","    loss_values.append(loss.item())\n","    if i % 200 == 199:    # print every 2000 mini-batches\n","        print('[%d, %5d] loss: %.3f' %\n","              (epoch + 1, i + 1, running_loss / 200))\n","        running_loss = 0.0\n","  #caculate accuracy\n","  train_correct,train_total,train_acc = predict_accuracy(model,trainloader)\n","  ## calculate validation accuracy\n","  val_correct,val_total,val_acc = predict_accuracy(model,validloader)\n","  accuracies.append(train_acc)\n","  val_accuracy.append(val_acc)\n","\n","  print('(Epoch %d / %d) train acc: %f; val_acc: %f' % (epoch+1, 10, train_acc, val_acc))\n","\n","  #retain best parameters\n","  if val_acc > best_val_acc:\n","    best_val_acc = val_acc\n","    best_params = model.state_dict()\n","\n","print('Finished Training')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ON3t36Hwct9P"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"Q__wKMG6cv-W"},"source":["#SGD with Adam"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"QFzySLjJRRMV","outputId":"553cc6e0-4df0-4663-e633-50c35ce115f8"},"outputs":[{"name":"stdout","output_type":"stream","text":["[1,   200] loss: 2.354\n","[1,   400] loss: 2.328\n","[1,   600] loss: 2.349\n","[1,   800] loss: 2.331\n","[1,  1000] loss: 2.338\n","[1,  1200] loss: 2.334\n","[1,  1400] loss: 2.344\n","[1,  1600] loss: 2.335\n","[1,  1800] loss: 2.335\n","[1,  2000] loss: 2.335\n","[1,  2200] loss: 2.351\n","[1,  2400] loss: 2.336\n","[1,  2600] loss: 2.330\n","[1,  2800] loss: 2.343\n","[1,  3000] loss: 2.331\n","[1,  3200] loss: 2.346\n","[1,  3400] loss: 2.332\n","[1,  3600] loss: 2.330\n","[1,  3800] loss: 2.349\n","[1,  4000] loss: 2.342\n","[1,  4200] loss: 2.349\n","[1,  4400] loss: 2.347\n","[1,  4600] loss: 2.341\n","[1,  4800] loss: 2.341\n","[1,  5000] loss: 2.334\n","[1,  5200] loss: 2.332\n","[1,  5400] loss: 2.342\n","[1,  5600] loss: 2.343\n","[1,  5800] loss: 2.341\n","[1,  6000] loss: 2.345\n","[1,  6200] loss: 2.345\n","[1,  6400] loss: 2.336\n","[1,  6600] loss: 2.354\n","[1,  6800] loss: 2.336\n","[1,  7000] loss: 2.336\n","[1,  7200] loss: 2.335\n","[1,  7400] loss: 2.349\n","[1,  7600] loss: 2.352\n","[1,  7800] loss: 2.332\n","[1,  8000] loss: 2.351\n","[1,  8200] loss: 2.338\n"]}],"source":["loss_values = []\n","accuracies = []\n","best_val_acc = 0\n","val_accuracy = []\n","\n","\n","\n","optimizer = AMP(params=filter(lambda p: p.requires_grad, model.parameters()),\n","                        lr=0.1, #changing this from 0.1\n","                        epsilon=0.1,\n","                        inner_lr=0.1,\n","                        inner_iter=10,\n","                        base_optimizer=torch.optim.Adam,\n","                        #momentum=0.9,\n","                        weight_decay=1e-4)\n","                        #nesterov=False)\n","\n","for epoch in range(10):  # loop over the dataset multiple times\n","  total =0\n","  correct = 0\n","\n","  running_loss = 0.0\n","\n","  for i, data in enumerate(trainloader, 0):\n","\n","    inputs, labels = data\n","\n","    def closure():\n","      optimizer.zero_grad()\n","      outputs = model(inputs)\n","      loss = criterion(outputs, labels)\n","      loss.backward()\n","      #torch.nn.utils.clip_grad_norm_(model.parameters(),max_norm=0.5)\n","      return outputs, loss\n","\n","    outputs, loss = optimizer.step(closure)\n","\n","\n","      # print statistics\n","    running_loss += loss.item()\n","    loss_values.append(loss.item())\n","    if i % 200 == 199:    # print every 2000 mini-batches\n","        print('[%d, %5d] loss: %.3f' %\n","              (epoch + 1, i + 1, running_loss / 200))\n","        running_loss = 0.0\n","  #caculate accuracy\n","  train_correct,train_total,train_acc = predict_accuracy(model,trainloader)\n","  ## calculate validation accuracy\n","  val_correct,val_total,val_acc = predict_accuracy(model,validloader)\n","  accuracies.append(train_acc)\n","  val_accuracy.append(val_acc)\n","\n","  print('(Epoch %d / %d) train acc: %f; val_acc: %f' % (epoch+1, 10, train_acc, val_acc))\n","\n","  #retain best parameters\n","  if val_acc > best_val_acc:\n","    best_val_acc = val_acc\n","    best_params = model.state_dict()\n","\n","print('Finished Training')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OievMJsVEVYn"},"outputs":[],"source":["optimizer"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bUXHecu0dme_"},"outputs":[],"source":["torch.save(model.state_dict(),'resnet_amp_trained.pt') #save the fully trained network\n","predict_accuracy(model,testloader)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3dHafnpudo1G"},"outputs":[],"source":["torch.save(best_params,'Best_params_amp.pt') #f is something like 'resnet_nest_flood_bpoint15.pt'\n","model.load_state_dict(torch.load('Best_params_amp.pt'))\n","predict_accuracy(model,testloader)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qGobRYImdpbU"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZZBc4ew8igK3"},"outputs":[],"source":["loss_values = [el.item() for el in loss_values]\n","\n","plt.plot(loss_values,label='Training')\n","plt.xlabel('Iterations')\n","plt.ylabel('Loss')\n","plt.legend();\n","plt.title('Resnet-20 Loss with AMP ')\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EV644jzLdXW4"},"outputs":[],"source":["plt.plot(accuracies,label='Training');\n","plt.plot(val_accuracy,label='Validation');\n","plt.xlabel('Epochs')\n","plt.ylabel('Accuracy')\n","plt.legend();\n","plt.title('Resnet-20 Accuracy with AMP')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FFLQAI-WdXRQ"},"outputs":[],"source":["fig, (axs1,axs2) = plt.subplots(1, 2, figsize=(15,5))\n","fig.suptitle('Resnet-20 Loss with AMP')\n","\n","                      \n","axs1.plot(loss_values,label='Training')\n","plt.xlabel('Iteration')\n","plt.ylabel('Loss')\n","axs1.legend();\n","\n","axs2.plot(accuracies,label='Training');\n","axs2.plot(val_accuracy,label='Validation');\n","plt.xlabel('Epochs')\n","plt.ylabel('Accuracy')\n","axs2.legend();"]},{"cell_type":"markdown","metadata":{"id":"BJcvcuFAEoQU"},"source":["# This definitely needs a larger learning rate and more epochs. It is sooooo slow."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LCevdJzDEoAD"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"O6zO9J1sdXKb"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Sc9z1nWbdXEp"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UBgA1CI4dW-j"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"B4FN7JiCdW4g"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bnGMp9mFdWwr"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kjv71jE3iTWZ"},"outputs":[],"source":["#loss_values_list"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":287},"executionInfo":{"elapsed":1225,"status":"ok","timestamp":1678649699570,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":420},"id":"AT1E3rlqiWEE","outputId":"b74c7965-c57f-4acc-9d6b-dd84a3cf0897"},"outputs":[{"data":{"text/plain":["(0.0, 10000.0)"]},"execution_count":70,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plt.plot(loss_values)\n","plt.ylim((0,25))\n","plt.xlim((0,10000))\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"executionInfo":{"elapsed":189,"status":"ok","timestamp":1678572773422,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"0k0A-egYib57","outputId":"a3fcf5de-c5e2-4e4e-b383-8bbdca796a4e"},"outputs":[{"data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f916804cb80>]"]},"execution_count":21,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plt.plot(accuracies)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Ks1jG9Q9VC9g"},"outputs":[],"source":["import csv\n","torch.save(model.state_dict(),'resnet_sgdnest.pt')\n","#save loss and accuracies\n","# with open('GFG', 'w') as f:\n","      \n","#     # using csv.writer method from CSV package\n","#     write = csv.writer(f)\n","      \n","#     write.writerows(loss_values_)\n","#     write.writerows(accuracies)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":668641,"status":"ok","timestamp":1678650383124,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":420},"id":"v2EpZCRsQsRx","outputId":"53427817-0659-4a12-9635-0b88cdf37b07"},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy of the network on the 12500 training images: 10 %\n"]}],"source":["correct = 0\n","total = 0\n","with torch.no_grad(): #no grad so that we don't change the weights\n","    for data in trainloader:\n","        images, labels = data\n","        outputs = model(images)\n","        _, predicted = torch.max(outputs.data, 1)\n","        total += labels.size(0)\n","        correct += (predicted == labels).sum().item()\n","\n","print('Accuracy of the network on the 12500 training images: %d %%' % (\n","    100 * correct / total))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":133868,"status":"ok","timestamp":1678650516956,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":420},"id":"qfPnwQ4IRP6-","outputId":"6376c6e2-5161-40a5-beb8-afd649c45390"},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy of the network on the 10000 test images: 10 %\n"]}],"source":["correct = 0\n","total = 0\n","with torch.no_grad(): #no grad so that we don't change the weights\n","    for data in testloader:\n","        images, labels = data\n","        outputs = model(images)\n","        _, predicted = torch.max(outputs.data, 1)\n","        total += labels.size(0)\n","        correct += (predicted == labels).sum().item()\n","\n","print('Accuracy of the network on the 10000 test images: %d %%' % (\n","    100 * correct / total))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EG2_bR_m3ORY"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2ZSumVvJ3OOr"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9VTf1Ppb3OLu"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0ZaW9hcd3OJG"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wGErQr0Q3OGw"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HpG-YqVc3OEk"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XUqwA5Ey3OCT"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jWheh8GR3N_p"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"99lUJB083a60"},"source":["# 2. Flooding"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":17,"status":"ok","timestamp":1678572937724,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"LM6prK8n3jLK","outputId":"5b030cd5-436c-426f-f14b-b9ddf39a582f"},"outputs":[{"name":"stderr","output_type":"stream","text":["Using cache found in /root/.cache/torch/hub/pytorch_vision_v0.10.0\n","/usr/local/lib/python3.9/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.9/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=None`.\n","  warnings.warn(msg)\n"]}],"source":["model_flood = torch.hub.load('pytorch/vision:v0.10.0', 'resnet18', pretrained=False)\n","#model_flood"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VW51Tfws3s9l"},"outputs":[],"source":["optimizer_flood = optim.SGD(model_flood.parameters(), nesterov=True, momentum=0.9,lr=0.001)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":31387,"status":"ok","timestamp":1678577866239,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"h8WoqnC73zeU","outputId":"75c3c90a-e730-440f-b941-3115ecffd42f"},"outputs":[{"name":"stdout","output_type":"stream","text":["[1,  2000] loss: 2.379\n","[1,  4000] loss: 2.046\n","[1,  6000] loss: 1.929\n","[1,  8000] loss: 1.853\n","[1, 10000] loss: 1.770\n","[1, 12000] loss: 1.915\n","0.5\n","[2,  2000] loss: 1.744\n","[2,  4000] loss: 1.675\n","[2,  6000] loss: 1.607\n","[2,  8000] loss: 1.584\n","[2, 10000] loss: 1.520\n","[2, 12000] loss: 1.467\n","0.5\n","[3,  2000] loss: 1.442\n","[3,  4000] loss: 1.386\n","[3,  6000] loss: 1.359\n","[3,  8000] loss: 1.352\n","[3, 10000] loss: 1.263\n","[3, 12000] loss: 1.286\n","1.0\n","[4,  2000] loss: 1.198\n","[4,  4000] loss: 1.179\n","[4,  6000] loss: 1.163\n","[4,  8000] loss: 1.159\n","[4, 10000] loss: 1.156\n","[4, 12000] loss: 1.159\n","0.5\n","[5,  2000] loss: 1.087\n","[5,  4000] loss: 1.081\n","[5,  6000] loss: 1.046\n","[5,  8000] loss: 1.049\n","[5, 10000] loss: 1.025\n","[5, 12000] loss: 1.032\n","0.75\n","[6,  2000] loss: 0.954\n","[6,  4000] loss: 0.989\n","[6,  6000] loss: 0.920\n","[6,  8000] loss: 0.961\n","[6, 10000] loss: 0.941\n","[6, 12000] loss: 0.941\n","0.25\n","[7,  2000] loss: 0.839\n","[7,  4000] loss: 0.863\n","[7,  6000] loss: 0.870\n","[7,  8000] loss: 0.867\n","[7, 10000] loss: 0.855\n","[7, 12000] loss: 0.863\n","0.75\n","[8,  2000] loss: 0.762\n","[8,  4000] loss: 0.770\n","[8,  6000] loss: 0.785\n","[8,  8000] loss: 0.777\n","[8, 10000] loss: 0.808\n","[8, 12000] loss: 0.797\n","0.5\n","[9,  2000] loss: 0.715\n","[9,  4000] loss: 0.695\n","[9,  6000] loss: 0.731\n","[9,  8000] loss: 0.742\n","[9, 10000] loss: 0.728\n","[9, 12000] loss: 0.732\n","0.5\n","[10,  2000] loss: 0.630\n","[10,  4000] loss: 0.639\n","[10,  6000] loss: 0.658\n","[10,  8000] loss: 0.681\n","[10, 10000] loss: 0.653\n","[10, 12000] loss: 0.690\n","1.0\n","Finished Training\n"]}],"source":["loss_values_flood = []\n","accuracies_flood = []\n","b=0.15\n","for epoch in range(10):  # loop over the dataset multiple times\n","    total =0\n","    correct = 0\n","\n","    running_loss = 0.0\n","    for i, data in enumerate(trainloader, 0):\n","        # get the inputs\n","        inputs, labels = data\n","\n","        # zero the parameter gradients\n","        optimizer_flood.zero_grad()\n","\n","        # forward + backward + optimize\n","        outputs = model_flood(inputs)\n","        loss = criterion(outputs, labels)\n","        flood = (loss-b).abs()+b \n","        flood.backward()\n","        optimizer_flood.step()\n","\n","        # print statistics\n","        running_loss += loss.item()\n","        loss_values_flood.append(flood.item())\n","        if i % 2000 == 1999:    # print every 2000 mini-batches\n","            print('[%d, %5d] loss: %.3f' %\n","                  (epoch + 1, i + 1, running_loss / 2000))\n","            running_loss = 0.0\n","    #caculate accuracy\n","    with torch.no_grad():\n","        _, predicted = torch.max(outputs.data, 1)\n","        total += labels.size(0)\n","        correct += (predicted == labels).sum().item()\n","        print(correct/total)\n","        accuracies_flood.append(correct/total)\n","\n","print('Finished Training')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":141460,"status":"ok","timestamp":1678579038771,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"OsdwfddY3N9C","outputId":"c0c48e57-2979-47c9-936b-296be3682cb6"},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy of the network on the 12500 training images: 78 %\n"]},{"data":{"text/plain":["(39157, 50000, 0.78314)"]},"execution_count":29,"metadata":{},"output_type":"execute_result"}],"source":["predict_accuracy(model_flood,trainloader)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":30500,"status":"ok","timestamp":1678579345297,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"rTAC9Ass3N6a","outputId":"bba062fa-9657-43e0-f3ce-121fdce588af"},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy of the network on the 12500 training images: 69 %\n"]},{"data":{"text/plain":["(6903, 10000, 0.6903)"]},"execution_count":35,"metadata":{},"output_type":"execute_result"}],"source":["predict_accuracy(model_flood,testloader)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"executionInfo":{"elapsed":655,"status":"ok","timestamp":1678579069765,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"U2UtYZ003N3z","outputId":"4c00c885-a4cf-4aeb-9444-2db2362f1d6a"},"outputs":[{"data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f89740b63a0>]"]},"execution_count":31,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plt.plot(loss_values_flood)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"executionInfo":{"elapsed":7,"status":"ok","timestamp":1678579069766,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"UWnJga613N04","outputId":"79ba0112-4f5f-453d-f8d8-078c11de3172"},"outputs":[{"data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f91af8ebbe0>]"]},"execution_count":32,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plt.plot(accuracies_flood)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ciInWwQe3NyY"},"outputs":[],"source":["import csv\n","torch.save(model.state_dict(),'resnet_nest_flood_bpoint15.pt')\n","#save loss and accuracies\n","# with open('GFG', 'w') as f:\n","      \n","#     # using csv.writer method from CSV package\n","#     write = csv.writer(f)\n","      \n","#     write.writerows(loss_values_list)\n","#     write.writerows(accuracies)\n","\n","\n","with open(\"file_flood_nest.txt\", \"w\") as output:\n","    output.write(str(loss_values_list))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Kn1ogmUzRPu7"},"outputs":[],"source":["b_tracker ={0.15:loss_values_list}"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4_uawbZiIQz2"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"e30wk_LgH0sS"},"source":["#3. Trying a more aggressive loss value since accuracy is roughly the same on test set and lower on training set."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":318,"status":"ok","timestamp":1678580807797,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"OXd5HReKIh94","outputId":"42a01cf1-5926-4a6e-ed0a-2040cd6f1275"},"outputs":[{"name":"stderr","output_type":"stream","text":["Using cache found in /root/.cache/torch/hub/pytorch_vision_v0.10.0\n"]}],"source":["model_flood2 = torch.hub.load('pytorch/vision:v0.10.0', 'resnet18', weights=None)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KO8lqX2xNMC7"},"outputs":[],"source":["optimizer_flood2 = optim.SGD(model_flood2.parameters(), nesterov=True, momentum=0.9,lr=0.001)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_LEXGv4IH0TX","outputId":"c6456982-2455-4a49-f1d8-a7aaabe7a7a9"},"outputs":[{"name":"stdout","output_type":"stream","text":["[1,  2000] loss: 2.362\n","[1,  4000] loss: 2.053\n","[1,  6000] loss: 1.939\n","[1,  8000] loss: 1.869\n","[1, 10000] loss: 1.820\n","[1, 12000] loss: 1.776\n","0.0\n","[2,  2000] loss: 1.698\n","[2,  4000] loss: 1.687\n","[2,  6000] loss: 1.661\n","[2,  8000] loss: 1.654\n","[2, 10000] loss: 1.617\n","[2, 12000] loss: 1.599\n","1.0\n","[3,  2000] loss: 1.577\n","[3,  4000] loss: 1.564\n","[3,  6000] loss: 1.573\n","[3,  8000] loss: 1.542\n","[3, 10000] loss: 1.558\n","[3, 12000] loss: 1.533\n","0.25\n","[4,  2000] loss: 1.509\n","[4,  4000] loss: 1.497\n","[4,  6000] loss: 1.494\n","[4,  8000] loss: 1.490\n","[4, 10000] loss: 1.501\n","[4, 12000] loss: 1.489\n","0.5\n","[5,  2000] loss: 1.473\n","[5,  4000] loss: 1.472\n","[5,  6000] loss: 1.463\n","[5,  8000] loss: 1.465\n","[5, 10000] loss: 1.459\n","[5, 12000] loss: 1.458\n","0.5\n","[6,  2000] loss: 1.448\n","[6,  4000] loss: 1.452\n","[6,  6000] loss: 1.439\n","[6,  8000] loss: 1.443\n","[6, 10000] loss: 1.432\n"]}],"source":["loss_values_flood2 = []\n","accuracies_flood2 = []\n","b=1.286\n","for epoch in range(10):  # loop over the dataset multiple times\n","    total =0\n","    correct = 0\n","\n","    running_loss = 0.0\n","    for i, data in enumerate(trainloader, 0):\n","        # get the inputs\n","        inputs, labels = data\n","\n","        # zero the parameter gradients\n","        optimizer_flood2.zero_grad()\n","\n","        # forward + backward + optimize\n","        outputs = model_flood2(inputs)\n","        loss = criterion(outputs, labels)\n","        flood = (loss-b).abs()+b \n","        flood.backward()\n","        optimizer_flood2.step()\n","\n","        # print statistics\n","        running_loss += loss.item()\n","        loss_values_flood2.append(flood.item())\n","        if i % 2000 == 1999:    # print every 2000 mini-batches\n","            print('[%d, %5d] loss: %.3f' %\n","                  (epoch + 1, i + 1, running_loss / 2000))\n","            running_loss = 0.0\n","    #caculate accuracy\n","    with torch.no_grad():\n","        _, predicted = torch.max(outputs.data, 1)\n","        total += labels.size(0)\n","        correct += (predicted == labels).sum().item()\n","        print(correct/total)\n","        accuracies_flood2.append(correct/total)\n","\n","print('Finished Training')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pokHkETIH0Mt"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bqLDChzEH0FU"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xS6Oea-UHz0y"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gm0io9cmHzxx"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p6U8ZNzkHzuN"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cR3CoN-oHzrW"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-Zpn1hPJHzlf"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wEiaKalHHzgT"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"u3IRTguyHzdS"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iEl8nQWOQMEZ"},"outputs":[],"source":["# #!/usr/bin/python\n","# # -*- encoding: utf-8 -*-\n","\n","# import os\n","# import torch\n","# import torch.nn as nn\n","# import torch.optim as optim\n","# from torchvision import datasets, transforms\n","# from torch.autograd import Variable\n","# from simple_model import ft_net\n","# import matplotlib.pyplot as plt\n","\n","# h, w = 256, 128\n","# data_dir = '/home/niruhan/Personal/paper/Market-1501-v15.09.15/pytorch'\n","# batchsize = 2\n","# num_epochs = 10\n","# use_gpu = torch.cuda.is_available()\n","\n","# transform_train_list = [\n","#     transforms.Resize((h, w), interpolation=3),\n","#     transforms.Pad(10),\n","#     transforms.ToTensor(),\n","#     transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n","# ]\n","\n","# transform_val_list = [\n","#     transforms.Resize(size=(h, w), interpolation=3),  # Image.BICUBIC\n","#     transforms.ToTensor(),\n","#     transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n","# ]\n","\n","# data_transforms = {\n","#     'train': transforms.Compose(transform_train_list),\n","#     'val': transforms.Compose(transform_val_list),\n","# }\n","\n","# image_datasets = {}\n","# image_datasets['train'] = datasets.ImageFolder(os.path.join(data_dir, 'train'),\n","#                                                data_transforms['train'])\n","# image_datasets['val'] = datasets.ImageFolder(os.path.join(data_dir, 'val'),\n","#                                              data_transforms['val'])\n","\n","# dataloaders = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=batchsize, shuffle=True, num_workers=8)\n","#                for x in ['train', 'val']}\n","\n","# class_names = image_datasets['train'].classes\n","# dataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'val']}\n","\n","# model = ft_net(len(class_names))\n","# criterion = nn.CrossEntropyLoss()\n","\n","# lr = 0.05\n","# optim_name = optim.SGD\n","# ignored_params = list(map(id, model.classifier.parameters()))\n","# base_params = filter(lambda p: id(p) not in ignored_params, model.parameters())\n","# classifier_params = model.classifier.parameters()\n","# optimizer = optim_name([\n","#     {'params': base_params, 'lr': 0.1 * lr},\n","#     {'params': classifier_params, 'lr': lr}\n","# ], weight_decay=5e-4, momentum=0.9, nesterov=True)\n","\n","# y_loss = {}  # loss history\n","# y_loss['train'] = []\n","# y_loss['val'] = []\n","# y_err = {}\n","# y_err['train'] = []\n","# y_err['val'] = []\n","\n","# x_epoch = []\n","# fig = plt.figure()\n","# ax0 = fig.add_subplot(121, title=\"loss\")\n","# ax1 = fig.add_subplot(122, title=\"top1err\")\n","\n","\n","# def draw_curve(current_epoch):\n","#     x_epoch.append(current_epoch)\n","#     ax0.plot(x_epoch, y_loss['train'], 'bo-', label='train')\n","#     ax0.plot(x_epoch, y_loss['val'], 'ro-', label='val')\n","#     ax1.plot(x_epoch, y_err['train'], 'bo-', label='train')\n","#     ax1.plot(x_epoch, y_err['val'], 'ro-', label='val')\n","#     if current_epoch == 0:\n","#         ax0.legend()\n","#         ax1.legend()\n","#     fig.savefig(os.path.join('./lossGraphs', 'train.jpg'))\n","\n","\n","# for epoch in range(num_epochs):\n","#     print('Epoch {}/{}'.format(epoch, num_epochs - 1))\n","#     print('-' * 10)\n","#     # Each epoch has a training and validation phase\n","#     for phase in ['train', 'val']:\n","#         if phase == 'train':\n","#             model.train(True)  # Set model to training mode\n","#         else:\n","#             model.train(False)  # Set model to evaluate mode\n","\n","#         running_loss = 0.0\n","#         running_corrects = 0.0\n","\n","#         count = 0\n","#         # Iterate over data.\n","#         for data in dataloaders[phase]:\n","#             if count > 10:\n","#                 break\n","\n","#             count = count + 1\n","#             # get a batch of inputs\n","#             inputs, labels = data\n","#             now_batch_size, c, h, w = inputs.shape\n","#             if now_batch_size < batchsize:  # skip the last batch\n","#                 continue\n","#             # print(inputs.shape)\n","#             # wrap them in Variable, if gpu is used, we transform the data to cuda.\n","#             if use_gpu:\n","#                 inputs = Variable(inputs.cuda())\n","#                 labels = Variable(labels.cuda())\n","#             else:\n","#                 inputs, labels = Variable(inputs), Variable(labels)\n","\n","#             # zero the parameter gradients\n","#             optimizer.zero_grad()\n","\n","#             # -------- forward --------\n","#             outputs = model(inputs)\n","#             _, preds = torch.max(outputs.data, 1)\n","#             loss = criterion(outputs, labels)\n","\n","#             del inputs\n","\n","#             # -------- backward + optimize --------\n","#             # only if in training phase\n","#             if phase == 'train':\n","#                 loss.backward()\n","#                 optimizer.step()\n","\n","#             # statistics\n","#             running_loss += loss.item() * now_batch_size\n","#             del loss\n","#             running_corrects += float(torch.sum(preds == labels.data))\n","\n","#         epoch_loss = running_loss / dataset_sizes[phase]\n","#         epoch_acc = running_corrects / dataset_sizes[phase]\n","\n","#         print('{} Loss: {:.4f} Acc: {:.4f}'.format(phase, epoch_loss, epoch_acc))\n","\n","#         y_loss[phase].append(epoch_loss)\n","#         y_err[phase].append(1.0 - epoch_acc)\n","\n","#         # deep copy the model\n","#         if phase == 'val':\n","#             draw_curve(epoch)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Evv9F8GSVWWO"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mP4yfbRiVWTe"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"HYFxehelVWQx"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Di_2-Sv-VV4_"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PiXm0MosVV2e"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vHo8nog1VVzy"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yRqWGpCCVVww"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"4YazGZR3VVuO"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WY7pZezrVVrN"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ALXOLSD6VVlt"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_qvvtDHNVVfK"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DP2XIL8VQL9u"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pMh--2-NQL2Q"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"agXyZwZTQLrz"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3weQEHhI_eUx"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"H0N1-9p9_eSM"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"63Fo6PBvVXeA"},"source":["## Flooding with Resnet-CIFAR10"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lP7-zBTL_ePt"},"outputs":[],"source":["import torch.optim as optim\n","\n","criterion = nn.CrossEntropyLoss()\n","optimizer = optim.Adam(model.parameters(), lr=0.001)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RSL6od6Q_eMz"},"outputs":[],"source":["flood = (loss-b).abs()+b "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FExLj7xQ_eHx"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XbLWYWoS_eFO"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"he5VTf-s_eCt"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wc-sUxEc_eAT"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FvOLsA7C_d9r"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FsrokG7k_d3b"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aLb3suhd_duk"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"30HG6LAGYFt4"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kYIeQB39YFq0"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"n5G6NVLfYFoJ"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vPIoL97FYFlB"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qlTanHQqYFiH"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sQEB1F2aYFe7"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"A6fUyzhYYFbv"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BytBA8LeYFXK"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Xv5uL0LCYFNr"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"O8GNstDEYFFQ"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BH1BBCVmKuJ2"},"outputs":[],"source":["import torch.nn as nn\n","import torch.nn.functional as F\n","\n","\n","class CNNet(nn.Module):\n","    def __init__(self):\n","        # conv --> maxpool --> conv --> linear ---> linear ---> linear\n","        super(CNNet, self).__init__()\n","        self.conv1 = nn.Conv2d(3, 6, 5)\n","        #docstring: torch.nn.Conv2d(in_channels, out_channels, kernel_size, stride=1, padding=0, dilation=1, groups=1, bias=True, padding_mode='zeros', device=None, dtype=None)\n","        self.pool = nn.MaxPool2d(2, 2)\n","        #docstring: torch.nn.MaxPool2d(kernel_size, stride=None, padding=0, dilation=1, return_indices=False, ceil_mode=False\n","        self.conv2 = nn.Conv2d(6, 16, 5)\n","        self.fc1 = nn.Linear(16 * 5 * 5, 120)\n","        self.fc2 = nn.Linear(120, 84)\n","        self.fc3 = nn.Linear(84, 10)\n","        # need to figure out the dim checks\n","\n","    def forward(self, x):\n","        x = self.pool(F.relu(self.conv1(x))) #get raunak to check architecture\n","        x = self.pool(F.relu(self.conv2(x)))\n","        x = x.view(-1, 16 * 5 * 5) #Returns a new tensor with the same data as the self tensor but of a different shape.\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        x = self.fc3(x)\n","        return x\n","\n","\n","net = CNNet()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OTwYXKz4Ku3A"},"outputs":[],"source":["import torch.optim as optim\n","\n","criterion = nn.CrossEntropyLoss()\n","optimizer = optim.Adam(net.parameters(), lr=0.001)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":242759,"status":"ok","timestamp":1678012305546,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"OvETlM9XNZu7","outputId":"14e57210-ddc8-4c27-af76-700501b333e4"},"outputs":[{"name":"stdout","output_type":"stream","text":["[1,  2000] loss: 1.879\n","[1,  4000] loss: 1.572\n","[1,  6000] loss: 1.493\n","[1,  8000] loss: 1.442\n","[1, 10000] loss: 1.416\n","[1, 12000] loss: 1.371\n","[2,  2000] loss: 1.312\n","[2,  4000] loss: 1.291\n","[2,  6000] loss: 1.282\n","[2,  8000] loss: 1.250\n","[2, 10000] loss: 1.242\n","[2, 12000] loss: 1.225\n","[3,  2000] loss: 1.173\n","[3,  4000] loss: 1.155\n","[3,  6000] loss: 1.185\n","[3,  8000] loss: 1.161\n","[3, 10000] loss: 1.172\n","[3, 12000] loss: 1.157\n","Finished Training\n"]}],"source":["for epoch in range(3):  # loop over the dataset multiple times\n","\n","    running_loss = 0.0\n","    for i, data in enumerate(trainloader, 0):\n","        # get the inputs\n","        inputs, labels = data\n","\n","        # zero the parameter gradients\n","        optimizer.zero_grad()\n","\n","        # forward + backward + optimize\n","        outputs = net(inputs)\n","        loss = criterion(outputs, labels)\n","        loss.backward()\n","        optimizer.step()\n","\n","        # print statistics\n","        running_loss += loss.item()\n","        if i % 2000 == 1999:    # print every 2000 mini-batches\n","            print('[%d, %5d] loss: %.3f' %\n","                  (epoch + 1, i + 1, running_loss / 2000))\n","            running_loss = 0.0\n","\n","print('Finished Training')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":156},"executionInfo":{"elapsed":598,"status":"ok","timestamp":1678012306136,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"Xm_opQcuNbAs","outputId":"11de4595-63c2-4051-98e6-6c3aed8cb13b"},"outputs":[{"name":"stdout","output_type":"stream","text":["GroundTruth:    cat  ship  ship plane\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["dataiter = iter(testloader)\n","images, labels = next(dataiter) #.next()\n","\n","# print images\n","imshow(torchvision.utils.make_grid(images))\n","print('GroundTruth: ', ' '.join('%5s' % classes[labels[j]] for j in range(4)))\n","outputs = net(images)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":600,"status":"ok","timestamp":1678012306731,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"NvXTRpz0PheP","outputId":"a889a95e-d5bf-4433-85b4-1d9f3e7b17f0"},"outputs":[{"data":{"text/plain":["12500"]},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":["len(trainloader)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2,"status":"ok","timestamp":1678012306731,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"TO67ETvmPWNP","outputId":"37414633-9b99-4ebe-d031-3b873e1f3324"},"outputs":[{"name":"stdout","output_type":"stream","text":["Predicted:    cat  ship   car  ship\n"]}],"source":["_, predicted = torch.max(outputs, 1)\n","\n","print('Predicted: ', ' '.join('%5s' % classes[predicted[j]]\n","                              for j in range(4)))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uJ2U6O66TOEn"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"CepWlGs2TOwC"},"source":["## Training Accuracy"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":45353,"status":"ok","timestamp":1678012352083,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"4CYIoJaIQkds","outputId":"bc29268e-bd82-4064-a474-61b0aed734c2"},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy of the network on the 12500 training images: 60 %\n"]}],"source":["correct = 0\n","total = 0\n","with torch.no_grad(): #no grad so that we don't change the weights\n","    for data in trainloader:\n","        images, labels = data\n","        outputs = net(images)\n","        _, predicted = torch.max(outputs.data, 1)\n","        total += labels.size(0)\n","        correct += (predicted == labels).sum().item()\n","\n","print('Accuracy of the network on the 12500 training images: %d %%' % (\n","    100 * correct / total))"]},{"cell_type":"markdown","metadata":{"id":"xa3xDUm2TQwC"},"source":["## Test Accuracy"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9458,"status":"ok","timestamp":1678012361527,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"SIR9EDR3PbS0","outputId":"bfe0267d-5cd6-47d7-8097-fa20d76526b0"},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy of the network on the 10000 test images: 57 %\n"]}],"source":["correct = 0\n","total = 0\n","with torch.no_grad(): #no grad so that we don't change the weights\n","    for data in testloader:\n","        images, labels = data\n","        outputs = net(images)\n","        _, predicted = torch.max(outputs.data, 1)\n","        total += labels.size(0)\n","        correct += (predicted == labels).sum().item()\n","\n","print('Accuracy of the network on the 10000 test images: %d %%' % (\n","    100 * correct / total))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lA-pgbOpRdDT"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"evvdOzjCRkRL"},"source":["## Checking which classes underperformed and overperformed"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10191,"status":"ok","timestamp":1678012371716,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"R_l2qBCWP2f0","outputId":"ed0ea9a9-cbeb-4ee9-a209-fc4bf270a9fb"},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy of plane : 74 %\n","Accuracy of   car : 69 %\n","Accuracy of  bird : 27 %\n","Accuracy of   cat : 59 %\n","Accuracy of  deer : 47 %\n","Accuracy of   dog : 31 %\n","Accuracy of  frog : 62 %\n","Accuracy of horse : 62 %\n","Accuracy of  ship : 63 %\n","Accuracy of truck : 72 %\n"]}],"source":["class_correct = list(0. for i in range(10))\n","class_total = list(0. for i in range(10))\n","with torch.no_grad():\n","    for data in testloader:\n","        images, labels = data\n","        outputs = net(images)\n","        _, predicted = torch.max(outputs, 1)\n","        c = (predicted == labels).squeeze()\n","        for i in range(4):\n","            label = labels[i]\n","            class_correct[label] += c[i].item()\n","            class_total[label] += 1\n","\n","\n","for i in range(10):\n","    print('Accuracy of %5s : %2d %%' % (\n","        classes[i], 100 * class_correct[i] / class_total[i]))"]},{"cell_type":"markdown","metadata":{"id":"5UZMpD2BUd25"},"source":["## Using GPU and saving models"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5310,"status":"ok","timestamp":1678012396678,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"fWPW2wKwP702","outputId":"b6fe908c-fc2a-4a32-fb19-599a77c835dd"},"outputs":[{"data":{"text/plain":["CNNet(\n","  (conv1): Conv2d(3, 6, kernel_size=(5, 5), stride=(1, 1))\n","  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","  (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))\n","  (fc1): Linear(in_features=400, out_features=120, bias=True)\n","  (fc2): Linear(in_features=120, out_features=84, bias=True)\n","  (fc3): Linear(in_features=84, out_features=10, bias=True)\n",")"]},"execution_count":13,"metadata":{},"output_type":"execute_result"}],"source":["net.to(device)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":216,"status":"ok","timestamp":1678012573673,"user":{"displayName":"Simran Masand","userId":"06064358475585269629"},"user_tz":480},"id":"vvctIAtoVR3T","outputId":"28a98faf-8653-4d91-ea82-3df604c282ba"},"outputs":[{"data":{"text/plain":["<All keys matched successfully>"]},"execution_count":17,"metadata":{},"output_type":"execute_result"}],"source":["torch.save(net.state_dict(), 'cifar10-cnn.pth')\n","model2 = to_device(CNNet(), device)\n","model2.load_state_dict(torch.load('cifar10-cnn.pth'))\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yxSwPCMwVaKO"},"outputs":[],"source":[]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":["yUaU31blS68J"],"provenance":[{"file_id":"1m5vOVwPeP2BesMc08IV4jAzcHW5cpS7i","timestamp":1678583720638},{"file_id":"1tHdN_JXRuvJleXbnFX8m5RBP4z-f2C2G","timestamp":1678483748599}]},"gpuClass":"premium","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"056fce0828114b978dbc53a24679a9a5":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_86bac493d19746a8965ae25c03ecce79","max":170498071,"min":0,"orientation":"horizontal","style":"IPY_MODEL_91e5dbe8b5e142fe98788e558ff12626","value":170498071}},"1f7e08c4f177494fbf1e13cf9ba02c96":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"3299681795e64bd5946596e2810adb49":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_1f7e08c4f177494fbf1e13cf9ba02c96","placeholder":"​","style":"IPY_MODEL_5617f3e45bee44ecbb38c17f59ae235d","value":"100%"}},"3eda224dcc524412befb767f915f499b":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_a9348fa9373a48788049e2db3be960ab","placeholder":"​","style":"IPY_MODEL_3f7f059f25c645348047170ddfae689e","value":" 170498071/170498071 [00:13&lt;00:00, 13865981.76it/s]"}},"3f7f059f25c645348047170ddfae689e":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"5617f3e45bee44ecbb38c17f59ae235d":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"78283ffae43f45029aa6a5315becc1ea":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"86bac493d19746a8965ae25c03ecce79":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"91e5dbe8b5e142fe98788e558ff12626":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"a20ca32753414294961ff73e256507ac":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_3299681795e64bd5946596e2810adb49","IPY_MODEL_056fce0828114b978dbc53a24679a9a5","IPY_MODEL_3eda224dcc524412befb767f915f499b"],"layout":"IPY_MODEL_78283ffae43f45029aa6a5315becc1ea"}},"a9348fa9373a48788049e2db3be960ab":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}}}}},"nbformat":4,"nbformat_minor":0}